#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "superloopDisplay.h"
#include "mainFSM.h"
#include "board_PowerModes.h"

extern char	heap[GFX_OS_HEAP_SIZE];
extern gThread	hThread;
void GFXPreinit (void)
{ uint32_t i;
//	defaultFgColor=GFX_WHITE;
//	defaultStyle= &BlackWidgetStyle;
	for (i=0;i<GFX_OS_HEAP_SIZE;i++)
	{heap[i]=0;};
	
//	for (i=0;i<(GTIMER_THREAD_WORKAREA_SIZE & (~3));i++)
//	 waTimerThread[i]=0;
//	
//	for (i=0;i<sizeof(Assignments);i++)
//	     ((char*)&Assignments)[i]=0;
//	
//	GDISP=0;
//	
//	for (i=0;i<sizeof(MouseTimer);i++)
//	     ((char*)&MouseTimer)[i]=0;
//	
//	RedrawPending=0;
//	
//	for (i=0;i<sizeof(RedrawTimer);i++)
//	     ((char*)&RedrawTimer)[i]=0;
//	
//	for (i=0;i<sizeof(_GWINList);i++)
//	     ((char*)&_GWINList)[i]=0;
	
	
//	_GWINwm=0;
//	_gfxCurrentThread=0;
////	deadQ;
//	defaultBgColor=0;
//	defaultFont=0;
//	dhead=0;
//	dtail=0;
//	fontList=0;
//	freeSlots=0;
//	gdispInitDone;
//	geventMutex=0;
//	gfxInitDone;
//	gl;
//for (i=0;i<sizeof(gwinsem);i++)
//	     ((char*)&gwinsem)[i]=0;
	hThread=0;
//	jmpmask1;
//	jmpmask2;
//	maincxt;
//	mainthread;
//	mutex;
//	pTimerHead ;
//	pframeinfo;
//	readyQ;
//	stackbase;
//	stackdirup;
//	ticks2ms;
//	waitsem;


};

//------------------------- for power--------------------------------------
bool SuperLoop_Disp_SleepIn(void)
{
	return true;
};
bool SuperLoop_Disp_SleepOut(void)
{
	return true;
};

//------------------------for FSM-------------------------------------------
static e_FSMState_SuperLoopDisplay SLD_FSM_State;

//------------------------ for time ------------------------------------------
static systemticks_t LastUpdateTime;
#define DisplayUpdatePeriod 1000

GListener	gl;
GHandle		ghLabel1, ghLabel2, ghLabel3, ghLabel4, ghLabel5, ghLabel6, ghLabel7;
GHandle		ghList1;
static void createDebugLabels(void);
//---------------------- Control grafical objects------------------------------
int SLDw(void);
void displayACC(void);
//------------------------FSM control--------------------------------------------
int SLD_DisplInit(void);
int SLD_DisplReInit(void);
int SLD_DisplDeInit(void);


__inline e_FSMState_SuperLoopDisplay SLD_FSMState(void)
{
	return SLD_FSM_State;
};
static uint8_t state_inner;
//-------------------------for main-----------------------------------------------
int SLD(void)
{
	switch (state_inner)
	{
		case 0: 
			SLD_FSM_State=	e_FSMS_SLD_Off;
			if (bVSYS)
			{
      //	state_inner=3;	
				while (e_FRS_Done!=MainTransition_P_Displ(e_FSMS_SLD_On,e_FSMS_SLD_Off));
				while (e_FRS_Done!=MainTransition_P_Displ(e_FSMS_SLD_On,e_FSMS_SLD_On));
				delayms(100);
				SLD_DisplInit();
	//			gdispSetPowerMode(powerOff);
	//			while (e_FRS_Done!=MainTransition_P_Displ(e_FSMS_SLD_Off,e_FSMS_SLD_On));
	//			while (e_FRS_Done!=MainTransition_P_Displ(e_FSMS_SLD_Off,e_FSMS_SLD_Off));
  //      delayms(2);  
	//			while (e_FRS_Done!=MainTransition_P_Displ(e_FSMS_SLD_On,e_FSMS_SLD_Off));
	//			while (e_FRS_Done!=MainTransition_P_Displ(e_FSMS_SLD_On,e_FSMS_SLD_On));
	//			gdispSetPowerMode(powerOn);
	//			gwinRedrawDisplay(NULL,true);
//				while (e_FRS_Done!=MainTransition_P_Displ(e_FSMS_SLD_Off,e_FSMS_SLD_On));
//				while (e_FRS_Done!=MainTransition_P_Displ(e_FSMS_SLD_Off,e_FSMS_SLD_Off));
//        delayms(2);  
//				while (e_FRS_Done!=MainTransition_P_Displ(e_FSMS_SLD_On,e_FSMS_SLD_Off));
//				while (e_FRS_Done!=MainTransition_P_Displ(e_FSMS_SLD_On,e_FSMS_SLD_On));				
//				gdispSetPowerMode(powerOn);
//				gwinRedrawDisplay(NULL,true);
//				
				
//				SLD_DisplInit();
//				
//				SLD_DisplDeInit();
//				SLD_DisplInit();
//				
//				SLD_DisplDeInit();
//				SLD_DisplInit();
//				
//				SLD_DisplDeInit();
//				SLD_DisplInit();
//				
//				SLD_DisplDeInit();
//				SLD_DisplInit();
				
				
	//			gdispSetPowerMode(powerOn);
				gwinRedrawDisplay(NULL,true);
				
				SLD_FSM_State=e_FSMS_SLD_On;
		    state_inner=3;
			}	
			break;
		case 1:	
			SLD_FSM_State=	e_FSMS_SLD_Off;
			if (button_sign&&bVSYS)
			{
				state_inner=2;
				button_sign=0;
			};
			break;
		case 2:
				while (e_FRS_Done!=MainTransition_P_Displ(e_FSMS_SLD_On,e_FSMS_SLD_Off));
				while (e_FRS_Done!=MainTransition_P_Displ(e_FSMS_SLD_On,e_FSMS_SLD_On));
				SLD_DisplInit();
		    gwinRedrawDisplay(NULL,true);
				SLD_FSM_State=e_FSMS_SLD_On;
		    state_inner=3;

		case 3: 
			SLDw();
			if ((!bVSYS)|button_sign)
			{
				SLD_DisplDeInit();
				
				while (e_FRS_Done!=MainTransition_P_Displ(e_FSMS_SLD_Off,e_FSMS_SLD_On));
				while (e_FRS_Done!=MainTransition_P_Displ(e_FSMS_SLD_Off,e_FSMS_SLD_Off));
				
				button_sign=0;
				SLD_FSM_State=e_FSMS_SLD_Off;
				state_inner=1;
			};
			break;
    default: SLD_FSM_State=	e_FSMS_SLD_Off;		
	};
	return 0;
}

int SLD_init(void)
{
	return 0;
};

////------------------------FSM control--------------------------------------------

//GListener	gl;
//GHandle		ghLabel1, ghLabel2, ghLabel3, ghLabel4, ghLabel5, ghLabel6, ghLabel7;
//GHandle		ghList1 /*, ghList2*/;
//static	GEvent* pe;
//static	unsigned which;
//static GHandle  ghButton1, ghButton2;

int SLD_DisplDeInit(void)
{
	
//	gwinDestroy(ghButton2);
//	gwinDestroy(ghButton1);
//	gwinDestroy(ghList1);
//	gwinDestroy(ghLabel7);
//	gwinDestroy(ghLabel6);
//	gwinDestroy(ghLabel5);
//	gwinDestroy(ghLabel4);
//	gwinDestroy(ghLabel3);
//	gwinDestroy(ghLabel2);
//	gwinDestroy(ghLabel1);
	
	gfxDeinit();
	
	return 0;
};	

int SLD_DisplReInit(void)
{
	SLD_DisplInit();
//	gfxInit();
//	gdispSetBacklight(50);
//	
//	gwinSetDefaultFont(gdispOpenFont("U11"));
//	gwinSetDefaultStyle(&WhiteWidgetStyle, gFalse);
//	gdispClear(GFX_WHITE);
//	
//	LastUpdateTime=SystemTicks;
	return 0;
}

volatile struct fpgaFlags{
	uint16_t playStart						:1;
	uint16_t playBegin						:1;
	uint16_t fpgaConfig						:1;
	uint16_t playStop							:1;
	uint16_t fpgaConfigComplete		:1;
	uint16_t fileListUpdate				:1;
	uint16_t labelsUpdate					:1;
	uint16_t clockStart						:1;
	uint16_t nextFreq							:1;
	uint16_t endOfFile						:1;
}fpgaFlags;

uint8_t spiDispCapture;	//0 - free, 1 - busy
uint8_t totalTimeArr[]={'0','0',':','0','0',':','0','0',0};
uint8_t fileTimeArr[]={'0','0',':','0','0',':','0','0',0};
uint8_t totalSec=0;
uint8_t totalMin=0;
uint8_t totalHour=0;
uint8_t fileSec=0;
uint8_t fileMin=0;
uint8_t fileHour=0;
volatile uint32_t playClk;
volatile int playFileInList;
uint8_t fileName[50];

static void createLists(void) {
	GWidgetInit	wi;

	// Apply some default values for GWIN
	gwinWidgetClearInit(&wi);
	wi.g.show = gTrue;

	// Create the label for the first list
	wi.g.width = 150; wi.g.height = 20; wi.g.x = 10, wi.g.y = 0;
	wi.text = "Files:";
	ghLabel1 = gwinLabelCreate(0, &wi);

	// The first list widget
	wi.g.width = 220;
	wi.g.height = 140;
	wi.g.y = 20;
	wi.g.x = 10;
	wi.text = "Name of list 1";
	ghList1 = gwinListCreate(0, &wi, gFalse);
//	gwinListSetScroll(ghList1, scrollSmooth);
}
//static GListener gl;
static GHandle  ghButton1, ghButton2;

static void createButtons(void) {
	GWidgetInit	wi;

	// Apply some default values for GWIN
	gwinWidgetClearInit(&wi);
	wi.g.show = gTrue;

	// Apply the first button parameters
	wi.g.width = 100;
	wi.g.height = 30;
	wi.g.y = 280;
	wi.g.x = 10;
	wi.text = "Start";
	ghButton1 = gwinButtonCreate(0, &wi);
	
	// Apply the second button parameters
	wi.g.width = 100;
	wi.g.height = 30;
	wi.g.y = 280;
	wi.g.x = 130;
	wi.text = "Stop";
	ghButton2 = gwinButtonCreate(0, &wi);
}

static void createLabels(void) {
	GWidgetInit	wi;
	
	// Apply some default values for GWIN
	gwinWidgetClearInit(&wi);
	wi.g.show = gTrue;
	
	wi.g.width = 220; wi.g.height = 20; wi.g.x = 10, wi.g.y = 170;
//	wi.text = "Self test: OK";
	wi.text = "Init OK";
	ghLabel3 = gwinLabelCreate(0, &wi);
	gwinLabelSetAttribute(ghLabel3,100,"Self test:");
	
	wi.g.width = 220; wi.g.height = 20; wi.g.x = 10, wi.g.y = 190;
	wi.text = "Stop";
	ghLabel4 = gwinLabelCreate(0, &wi);
	gwinLabelSetAttribute(ghLabel4,100,"Status:");
	
	wi.g.width = 220; wi.g.height = 20; wi.g.x = 10, wi.g.y = 210;
	wi.text = "Not selected";
	ghLabel5 = gwinLabelCreate(0, &wi);
	gwinLabelSetAttribute(ghLabel5,100,"Program:");
	
	wi.g.width = 220; wi.g.height = 20; wi.g.x = 10, wi.g.y = 230;
	wi.text = "00:00:00";
	ghLabel6 = gwinLabelCreate(0, &wi);
	gwinLabelSetAttribute(ghLabel6,100,"Program timer:");
	
	wi.g.width = 220; wi.g.height = 20; wi.g.x = 10, wi.g.y = 250;
	wi.text = "00:00:00";
	ghLabel7 = gwinLabelCreate(0, &wi);
	gwinLabelSetAttribute(ghLabel7,100,"Total timer:");
}


static	GEvent* pe;
//static const gOrientation	orients[] = { gOrientation0, gOrientation90, gOrientation180, gOrientation270 };
static	unsigned which;

int SLD_init(void)
{ 
	
gfxInit();	

	
	
	GEvent* pe;


	// Set the widget defaults
	gwinSetDefaultFont(gdispOpenFont("U11"));
	gwinSetDefaultStyle(&WhiteWidgetStyle, gFalse);
	gdispClear(GFX_WHITE);

	// create the widget
	createButtons();
	createLists();
	createLabels();

	// We want to listen for widget events
	geventListenerInit(&gl);
	gwinAttachListener(&gl);
	gdispSetBacklight(50);
	
return 0;	
};

int SLD(void)
{ 
	//event handling
	pe = geventEventWait(&gl,10 ); //gDelayForever
	switch(pe->type){
		case GEVENT_GWIN_BUTTON:
			if (((GEventGWinButton*)pe)->gwin == ghButton1){
				playFileInList=gwinListGetSelected(ghList1);
				fpgaFlags.playStart=1;
				fpgaFlags.fpgaConfig=1;
				fpgaFlags.labelsUpdate=1;
			}
			if (((GEventGWinButton*)pe)->gwin == ghButton2){
				fpgaFlags.playStop=1;
			}
			break;
		default:
			break;
	}
	
	//information output to the display
	
	
	if(fpgaFlags.labelsUpdate==1){
		fpgaFlags.labelsUpdate=0;
		if(fpgaFlags.fileListUpdate==1){
			gwinListAddItem(ghList1, (char*)fileName, gTrue);
		}
		if(fpgaFlags.fpgaConfigComplete==1){
			gwinSetText(ghLabel3,"Config OK",gTrue);
		}
		else{
			gwinSetText(ghLabel3,"Config failed",gTrue);
		}
		if(fpgaFlags.playBegin==1){
			gwinSetText(ghLabel4,"Start",gTrue);
			gwinSetText(ghLabel5,gwinListGetSelectedText(ghList1),gTrue);
		}
		if(fpgaFlags.playStop==1){
			fpgaFlags.playStop=0;
			gwinSetText(ghLabel3,"Init OK",gTrue);
			gwinSetText(ghLabel4,"Stop",gTrue);
			gwinSetText(ghLabel6,"00:00:00",gTrue);
			gwinSetText(ghLabel7,"00:00:00",gTrue);
			totalSec=0;
			totalMin=0;
			totalHour=0;
			fileSec=0;
			fileMin=0;
			fileHour=0;
		}
	}
	
	if(playClk>=999){
		playClk=0;
		
		//Program timer
		if(fpgaFlags.endOfFile==1){
			fpgaFlags.endOfFile=0;
			fileHour=0;
			fileMin=0;
			fileSec=0;
		}
		else{
			if(fileSec==59){
				fileSec=0;
				if(fileMin==59){
					fileMin=0;
					if(fileHour==99){
						fileHour=0;
					}
					else{
						fileHour++;
					}
				}
				else{
					fileMin++;
				}
			}
			else{
				fileSec++;
			}
			fileTimeArr[0]=fileHour/10;
			fileTimeArr[1]=fileHour%10;
			fileTimeArr[3]=fileMin/10;
			fileTimeArr[4]=fileMin%10;
			fileTimeArr[6]=fileSec/10;
			fileTimeArr[7]=fileSec%10;
			timeToString(fileTimeArr);
			gwinSetText(ghLabel6,fileTimeArr,gTrue);
		}
		
		//Total timer
		if(totalSec==59){
			totalSec=0;
			if(totalMin==59){
				totalMin=0;
				if(totalHour==99){
					totalHour=0;
				}
				else{
					totalHour++;
				}
			}
			else{
				totalMin++;
			}
		}
		else{
			totalSec++;
		}
		totalTimeArr[0]=totalHour/10;
		totalTimeArr[1]=totalHour%10;
		totalTimeArr[3]=totalMin/10;
		totalTimeArr[4]=totalMin%10;
		totalTimeArr[6]=totalSec/10;
		totalTimeArr[7]=totalSec%10;
		timeToString(totalTimeArr);
		gwinSetText(ghLabel7,totalTimeArr,gTrue);
	}

return 0;	
};
