<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\Generator070.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\Generator070.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6120001: Last Updated: Tue Nov 24 14:00:20 2020
<BR><P>
<H3>Maximum Stack Usage =        512 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; SLD &rArr; SLD_DisplInit &rArr; gfxInit &rArr; _gosInit &rArr; _gosThreadsInit &rArr; _gfxGetStackStateInFn &rArr; _gfxGetStackState &rArr; setjmp
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[88]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">SVC_Handler</a><BR>
 <LI><a href="#[4]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">PendSV_Handler</a><BR>
 <LI><a href="#[10]">ADC1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">ADC1_IRQHandler</a><BR>
 <LI><a href="#[114]">gfxThreadExit</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[113]">_gfxXSwitch</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[10]">ADC1_IRQHandler</a> from startup_stm32g070xx.o(.text) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[4f]">ButtonMouseDown</a> from gfx_mk.o(.text.ButtonMouseDown) referenced from gfx_mk.o(.rodata.buttonVMT)
 <LI><a href="#[50]">ButtonMouseUp</a> from gfx_mk.o(.text.ButtonMouseUp) referenced from gfx_mk.o(.rodata.buttonVMT)
 <LI><a href="#[f]">DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler</a> from startup_stm32g070xx.o(.text) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[d]">DMA1_Channel1_IRQHandler</a> from startup_stm32g070xx.o(.text) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[e]">DMA1_Channel2_3_IRQHandler</a> from startup_stm32g070xx.o(.text) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[a]">EXTI0_1_IRQHandler</a> from startup_stm32g070xx.o(.text) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[b]">EXTI2_3_IRQHandler</a> from startup_stm32g070xx.o(.text) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[c]">EXTI4_15_IRQHandler</a> from board_powermodes.o(.text.EXTI4_15_IRQHandler) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[8]">FLASH_IRQHandler</a> from startup_stm32g070xx.o(.text) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[33]">GTimerThreadHandler</a> from gfx_mk.o(.text.GTimerThreadHandler) referenced from gfx_mk.o(.text.gtimerStart)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_stm32g070xx.o(.text) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[1a]">I2C1_IRQHandler</a> from i2c1.o(.text.I2C1_IRQHandler) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[1b]">I2C2_IRQHandler</a> from i2c2.o(.text.I2C2_IRQHandler) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[52]">ListDestroy</a> from gfx_mk.o(.text.ListDestroy) referenced from gfx_mk.o(.rodata.listVMT)
 <LI><a href="#[54]">ListMouseDown</a> from gfx_mk.o(.text.ListMouseDown) referenced from gfx_mk.o(.rodata.listVMT)
 <LI><a href="#[56]">ListMouseMove</a> from gfx_mk.o(.text.ListMouseMove) referenced from gfx_mk.o(.rodata.listVMT)
 <LI><a href="#[55]">ListMouseUp</a> from gfx_mk.o(.text.ListMouseUp) referenced from gfx_mk.o(.rodata.listVMT)
 <LI><a href="#[41]">MouseInit</a> from gmouse_lld_ft6x06.o(.text.MouseInit) referenced from gmouse_lld_ft6x06.o(.rodata.GMOUSEVMT_OnlyOne)
 <LI><a href="#[29]">MousePoll</a> from gfx_mk.o(.text.MousePoll) referenced from gfx_mk.o(.text._gmouseInitDriver)
 <LI><a href="#[1]">NMI_Handler</a> from startup_stm32g070xx.o(.text) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from startup_stm32g070xx.o(.text) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[9]">RCC_IRQHandler</a> from startup_stm32g070xx.o(.text) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[7]">RTC_TAMP_IRQHandler</a> from startup_stm32g070xx.o(.text) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[2b]">RedrawTimerFn</a> from gfx_mk.o(.text.RedrawTimerFn) referenced from gfx_mk.o(.text._gwmInit)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32g070xx.o(.text) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[1c]">SPI1_IRQHandler</a> from startup_stm32g070xx.o(.text) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[1d]">SPI2_IRQHandler</a> from startup_stm32g070xx.o(.text) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from startup_stm32g070xx.o(.text) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[5]">SysTick_Handler</a> from boardsetup.o(.text.SysTick_Handler) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[21]">SystemInit</a> from system_stm32g0xx.o(.text.SystemInit) referenced from startup_stm32g070xx.o(.text)
 <LI><a href="#[16]">TIM14_IRQHandler</a> from startup_stm32g070xx.o(.text) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[17]">TIM15_IRQHandler</a> from startup_stm32g070xx.o(.text) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[18]">TIM16_IRQHandler</a> from startup_stm32g070xx.o(.text) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[19]">TIM17_IRQHandler</a> from startup_stm32g070xx.o(.text) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[11]">TIM1_BRK_UP_TRG_COM_IRQHandler</a> from startup_stm32g070xx.o(.text) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[12]">TIM1_CC_IRQHandler</a> from startup_stm32g070xx.o(.text) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[13]">TIM3_IRQHandler</a> from superloop_player.o(.text.TIM3_IRQHandler) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[14]">TIM6_IRQHandler</a> from startup_stm32g070xx.o(.text) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[15]">TIM7_IRQHandler</a> from startup_stm32g070xx.o(.text) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[1e]">USART1_IRQHandler</a> from superloop_comm.o(.text.USART1_IRQHandler) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[1f]">USART2_IRQHandler</a> from startup_stm32g070xx.o(.text) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[20]">USART3_4_IRQHandler</a> from startup_stm32g070xx.o(.text) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[28]">W25qxx_Spi</a> from w25qxx.o(.text.W25qxx_Spi) referenced from w25qxx.o(.text.W25qxx_ReadPage)
 <LI><a href="#[28]">W25qxx_Spi</a> from w25qxx.o(.text.W25qxx_Spi) referenced from w25qxx.o(.text.W25qxx_WritePage)
 <LI><a href="#[45]">WM_Add</a> from gfx_mk.o(.text.WM_Add) referenced from gfx_mk.o(.rodata.GNullWindowManagerVMT)
 <LI><a href="#[44]">WM_DeInit</a> from gfx_mk.o(.text.WM_DeInit) referenced from gfx_mk.o(.rodata.GNullWindowManagerVMT)
 <LI><a href="#[46]">WM_Delete</a> from gfx_mk.o(.text.WM_Delete) referenced from gfx_mk.o(.rodata.GNullWindowManagerVMT)
 <LI><a href="#[43]">WM_Init</a> from gfx_mk.o(.text.WM_Init) referenced from gfx_mk.o(.rodata.GNullWindowManagerVMT)
 <LI><a href="#[4b]">WM_MinMax</a> from gfx_mk.o(.text.WM_MinMax) referenced from gfx_mk.o(.rodata.GNullWindowManagerVMT)
 <LI><a href="#[49]">WM_Move</a> from gfx_mk.o(.text.WM_Move) referenced from gfx_mk.o(.rodata.GNullWindowManagerVMT)
 <LI><a href="#[4a]">WM_Raise</a> from gfx_mk.o(.text.WM_Raise) referenced from gfx_mk.o(.rodata.GNullWindowManagerVMT)
 <LI><a href="#[47]">WM_Redraw</a> from gfx_mk.o(.text.WM_Redraw) referenced from gfx_mk.o(.rodata.GNullWindowManagerVMT)
 <LI><a href="#[48]">WM_Size</a> from gfx_mk.o(.text.WM_Size) referenced from gfx_mk.o(.rodata.GNullWindowManagerVMT)
 <LI><a href="#[6]">WWDG_IRQHandler</a> from startup_stm32g070xx.o(.text) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[22]">__main</a> from __main.o(!!!main) referenced from startup_stm32g070xx.o(.text)
 <LI><a href="#[38]">_gdispDeInitDriver</a> from gfx_mk.o(.text._gdispDeInitDriver) referenced from gdisp_lld_ili9341.o(.rodata.GDISPVMT_OnlyOne)
 <LI><a href="#[36]">_gdispInitDriver</a> from gfx_mk.o(.text._gdispInitDriver) referenced from gdisp_lld_ili9341.o(.rodata.GDISPVMT_OnlyOne)
 <LI><a href="#[37]">_gdispPostInitDriver</a> from gfx_mk.o(.text._gdispPostInitDriver) referenced from gdisp_lld_ili9341.o(.rodata.GDISPVMT_OnlyOne)
 <LI><a href="#[40]">_gmouseDeInitDriver</a> from gfx_mk.o(.text._gmouseDeInitDriver) referenced from gmouse_lld_ft6x06.o(.rodata.GMOUSEVMT_OnlyOne)
 <LI><a href="#[3e]">_gmouseInitDriver</a> from gfx_mk.o(.text._gmouseInitDriver) referenced from gmouse_lld_ft6x06.o(.rodata.GMOUSEVMT_OnlyOne)
 <LI><a href="#[3f]">_gmousePostInitDriver</a> from gfx_mk.o(.text._gmousePostInitDriver) referenced from gmouse_lld_ft6x06.o(.rodata.GMOUSEVMT_OnlyOne)
 <LI><a href="#[24]">_gwidgetCreate</a> from gfx_mk.o(.text._gwidgetCreate) referenced from gfx_mk.o(.text.ListMouseSelect)
 <LI><a href="#[24]">_gwidgetCreate</a> from gfx_mk.o(.text._gwidgetCreate) referenced from gfx_mk.o(.text._gwinSendEvent)
 <LI><a href="#[24]">_gwidgetCreate</a> from gfx_mk.o(.text._gwidgetCreate) referenced from gfx_mk.o(.text.gwinAttachListener)
 <LI><a href="#[4c]">_gwidgetDestroy</a> from gfx_mk.o(.text._gwidgetDestroy) referenced from gfx_mk.o(.rodata.buttonVMT)
 <LI><a href="#[4c]">_gwidgetDestroy</a> from gfx_mk.o(.text._gwidgetDestroy) referenced from gfx_mk.o(.rodata.labelVMT)
 <LI><a href="#[4d]">_gwidgetRedraw</a> from gfx_mk.o(.text._gwidgetRedraw) referenced from gfx_mk.o(.rodata.buttonVMT)
 <LI><a href="#[4d]">_gwidgetRedraw</a> from gfx_mk.o(.text._gwidgetRedraw) referenced from gfx_mk.o(.rodata.labelVMT)
 <LI><a href="#[4d]">_gwidgetRedraw</a> from gfx_mk.o(.text._gwidgetRedraw) referenced from gfx_mk.o(.rodata.listVMT)
 <LI><a href="#[2f]">delayms</a> from boardsetup.o(.text.delayms) referenced from gdisp_lld_ili9341.o(.text.gdisp_lld_init)
 <LI><a href="#[2d]">drawcharglyph</a> from gfx_mk.o(.text.drawcharglyph) referenced from gfx_mk.o(.text.gdispGDrawStringBox)
 <LI><a href="#[2c]">drawcharline</a> from gfx_mk.o(.text.drawcharline) referenced from gfx_mk.o(.text.fillcharglyph)
 <LI><a href="#[2e]">fillcharglyph</a> from gfx_mk.o(.text.fillcharglyph) referenced from gfx_mk.o(.text.gdispGFillStringBox)
 <LI><a href="#[34]">gdispGFillArea</a> from gfx_mk.o(.text.gdispGFillArea) referenced from gfx_mk.o(.text.gwinListDefaultDraw)
 <LI><a href="#[3d]">gdisp_lld_control</a> from gdisp_lld_ili9341.o(.text.gdisp_lld_control) referenced from gdisp_lld_ili9341.o(.rodata.GDISPVMT_OnlyOne)
 <LI><a href="#[39]">gdisp_lld_init</a> from gdisp_lld_ili9341.o(.text.gdisp_lld_init) referenced from gdisp_lld_ili9341.o(.rodata.GDISPVMT_OnlyOne)
 <LI><a href="#[3b]">gdisp_lld_write_color</a> from gdisp_lld_ili9341.o(.text.gdisp_lld_write_color) referenced from gdisp_lld_ili9341.o(.rodata.GDISPVMT_OnlyOne)
 <LI><a href="#[3a]">gdisp_lld_write_start</a> from gdisp_lld_ili9341.o(.text.gdisp_lld_write_start) referenced from gdisp_lld_ili9341.o(.rodata.GDISPVMT_OnlyOne)
 <LI><a href="#[3c]">gdisp_lld_write_stop</a> from gdisp_lld_ili9341.o(.text.gdisp_lld_write_stop) referenced from gdisp_lld_ili9341.o(.rodata.GDISPVMT_OnlyOne)
 <LI><a href="#[30]">gfxSleepMilliseconds</a> from gfx_mk.o(.text.gfxSleepMilliseconds) referenced from gdisp_lld_ili9341.o(.text.gdisp_lld_init)
 <LI><a href="#[2a]">gwidgetEvent</a> from gfx_mk.o(.text.gwidgetEvent) referenced from gfx_mk.o(.text._gwidgetInit)
 <LI><a href="#[4e]">gwinButtonDraw_Normal</a> from gfx_mk.o(.text.gwinButtonDraw_Normal) referenced from gfx_mk.o(.rodata.buttonVMT)
 <LI><a href="#[26]">gwinGLabelCreate</a> from gfx_mk.o(.text.gwinGLabelCreate) referenced from superloopdisplay.o(.text.SLD_DisplInit)
 <LI><a href="#[51]">gwinLabelDrawJustifiedLeft</a> from gfx_mk.o(.text.gwinLabelDrawJustifiedLeft) referenced from gfx_mk.o(.rodata.labelVMT)
 <LI><a href="#[53]">gwinListDefaultDraw</a> from gfx_mk.o(.text.gwinListDefaultDraw) referenced from gfx_mk.o(.rodata.listVMT)
 <LI><a href="#[27]">gwinSetText</a> from gfx_mk.o(.text.gwinSetText) referenced from superloopdisplay.o(.text.SLDw)
 <LI><a href="#[25]">gwinWidgetClearInit</a> from gfx_mk.o(.text.gwinWidgetClearInit) referenced from superloopdisplay.o(.text.SLD_DisplInit)
 <LI><a href="#[57]">mf_bwfont_character_width</a> from gfx_mk.o(.text.mf_bwfont_character_width) referenced from gfx_mk.o(.rodata.mf_bwfont_fixed_10x20)
 <LI><a href="#[58]">mf_bwfont_render_character</a> from gfx_mk.o(.text.mf_bwfont_render_character) referenced from gfx_mk.o(.rodata.mf_bwfont_fixed_10x20)
 <LI><a href="#[59]">mf_rlefont_character_width</a> from gfx_mk.o(.text.mf_rlefont_character_width) referenced from gfx_mk.o(.rodata.mf_rlefont_UI2)
 <LI><a href="#[5a]">mf_rlefont_render_character</a> from gfx_mk.o(.text.mf_rlefont_render_character) referenced from gfx_mk.o(.rodata.mf_rlefont_UI2)
 <LI><a href="#[5b]">mf_scaled_character_width</a> from gfx_mk.o(.text.mf_scaled_character_width) referenced from gfx_mk.o(.rodata.mf_rlefont_UI2_Double)
 <LI><a href="#[5b]">mf_scaled_character_width</a> from gfx_mk.o(.text.mf_scaled_character_width) referenced from gfx_mk.o(.rodata.mf_rlefont_UI2_Narrow)
 <LI><a href="#[5c]">mf_scaled_render_character</a> from gfx_mk.o(.text.mf_scaled_render_character) referenced from gfx_mk.o(.rodata.mf_rlefont_UI2_Double)
 <LI><a href="#[5c]">mf_scaled_render_character</a> from gfx_mk.o(.text.mf_scaled_render_character) referenced from gfx_mk.o(.rodata.mf_rlefont_UI2_Narrow)
 <LI><a href="#[42]">read_xyz</a> from gmouse_lld_ft6x06.o(.text.read_xyz) referenced from gmouse_lld_ft6x06.o(.rodata.GMOUSEVMT_OnlyOne)
 <LI><a href="#[35]">scaled_pixel_callback</a> from gfx_mk.o(.text.scaled_pixel_callback) referenced from gfx_mk.o(.text.mf_scaled_render_character)
 <LI><a href="#[23]">voidfun8</a> from i2c_common.o(.text.voidfun8) referenced from driverbq28z610.o(.text.BQ28z610_Read)
 <LI><a href="#[23]">voidfun8</a> from i2c_common.o(.text.voidfun8) referenced from drivertps65982_6.o(.text.TPS65982_6_RW)
 <LI><a href="#[32]">write_data</a> from gdisp_lld_ili9341.o(.text.write_data) referenced from gdisp_lld_ili9341.o(.text.gdisp_lld_write_start)
 <LI><a href="#[31]">write_index</a> from gdisp_lld_ili9341.o(.text.write_index) referenced from gdisp_lld_ili9341.o(.text.gdisp_lld_write_start)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[22]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(.text)
</UL>
<P><STRONG><a name="[5d]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[5f]"></a>__scatterload_rt2</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[179]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[17a]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[60]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[17b]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[17c]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))

<P><STRONG><a name="[61]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent_end
</UL>

<P><STRONG><a name="[62]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[67]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[17d]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[17e]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[17f]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[180]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[181]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[182]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[183]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[184]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[185]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[186]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[187]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[188]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[189]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[18a]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[18b]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[18c]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[18d]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[18e]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[18f]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[190]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[191]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[6c]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[192]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[193]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[194]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[195]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[196]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[197]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[198]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[5e]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[199]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[64]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[66]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[19a]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[68]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; SLD &rArr; SLD_DisplInit &rArr; gfxInit &rArr; _gosInit &rArr; _gosThreadsInit &rArr; _gfxGetStackStateInFn &rArr; _gfxGetStackState &rArr; setjmp
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[19b]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[8a]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[6b]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[19c]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[6d]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[74]"></a>__aeabi_memcpy4</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[19d]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text), UNUSED)

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32g070xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32g070xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32g070xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32g070xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32g070xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>ADC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g070xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g070xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g070xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>DMA1_Channel2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g070xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>EXTI0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g070xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>EXTI2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g070xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g070xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g070xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>RTC_TAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g070xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g070xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g070xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g070xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>TIM15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g070xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g070xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g070xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>TIM1_BRK_UP_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g070xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g070xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g070xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g070xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g070xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>USART3_4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g070xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g070xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[88]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32g070xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[63]"></a>_printf_int_dec</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned (Weak Reference)
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed (Weak Reference)
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_udiv10
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[14d]"></a>strcpy</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, strcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinSetText
</UL>

<P><STRONG><a name="[148]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinSetText
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinListAddItem
</UL>

<P><STRONG><a name="[73]"></a>__aeabi_memcpy</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, rt_memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinListAddItem
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gfxXSwitch
</UL>

<P><STRONG><a name="[19e]"></a>__rt_memcpy</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, rt_memcpy.o(.text), UNUSED)

<P><STRONG><a name="[76]"></a>_memset_w</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[75]"></a>_memset</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[77]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[19f]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[100]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25qxx_IsEmptySector
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdriverRegister
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwindowCreate
</UL>

<P><STRONG><a name="[1a0]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[78]"></a>__rt_memclr_w</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[99]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SLDw
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BQ25703_IIN_HOST_Eval
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freqInverse
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25qxx_SectorToPage
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25qxx_ReadSector
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTimerThreadHandler
</UL>

<P><STRONG><a name="[a7]"></a>__aeabi_uidivmod</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTimerThreadHandler
</UL>

<P><STRONG><a name="[b3]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idiv
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinListDefaultDraw
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinButtonDraw_Normal
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListMouseSelect
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListMouseDown
</UL>

<P><STRONG><a name="[149]"></a>__aeabi_idivmod</STRONG> (Thumb, 326 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_render_aligned
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinListDefaultDraw
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_round_to_tab
</UL>

<P><STRONG><a name="[1a1]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1a2]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1a3]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[142]"></a>__aeabi_f2uiz</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadFreqToFpga
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getControlParam
</UL>

<P><STRONG><a name="[1a4]"></a>_ffixu</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, ffixui.o(.text), UNUSED)

<P><STRONG><a name="[7a]"></a>__aeabi_i2f_normalise</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>

<P><STRONG><a name="[79]"></a>__aeabi_i2f</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadFreqToFpga
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getControlParam
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powf
</UL>

<P><STRONG><a name="[1a5]"></a>_fflt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)

<P><STRONG><a name="[7b]"></a>__aeabi_ui2f</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f_normalise
</UL>

<P><STRONG><a name="[1a6]"></a>_ffltu</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)

<P><STRONG><a name="[7c]"></a>setjmp</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, setjmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = setjmp
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__alloca_setjmp (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gfxGetStackState
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gfxXSwitch
</UL>

<P><STRONG><a name="[7e]"></a>longjmp</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, setjmp.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__alloca_longjmp (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gfxXSwitch
</UL>

<P><STRONG><a name="[80]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[82]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powf
</UL>

<P><STRONG><a name="[72]"></a>_printf_int_common</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding (Weak Reference)
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[71]"></a>__rt_udiv10</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rtudiv10.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[168]"></a>__aeabi_fdiv</STRONG> (Thumb, 0 bytes, Stack size 20 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_divzero
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powf
</UL>

<P><STRONG><a name="[86]"></a>_fdiv</STRONG> (Thumb, 334 bytes, Stack size 20 bytes, fdiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frdiv
</UL>

<P><STRONG><a name="[85]"></a>_frdiv</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fdiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
</UL>

<P><STRONG><a name="[172]"></a>_ffix_r</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, ffixir.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _ffix_r
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powf
</UL>

<P><STRONG><a name="[16d]"></a>__ARM_scalbnf</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, fscalbn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_scalbnf
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_overflow
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powf
</UL>

<P><STRONG><a name="[81]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>

<P><STRONG><a name="[1a7]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[1a8]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[1a9]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[87]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[1aa]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[65]"></a>__user_setup_stackheap</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[6a]"></a>exit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[6e]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[1ab]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[1ac]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[1ad]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[8b]"></a>BQ25703_ADCIBAT_Read</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, driverbq25703.o(.text.BQ25703_ADCIBAT_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = BQ25703_ADCIBAT_Read &rArr; BQ25703_Read &rArr; I2C_API_Exchange &rArr; i2cDataRW
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BQ25703_Read
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BQ25703_IBAT_DCH
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BQ25703_IBAT_CH
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TransitionFunction
</UL>

<P><STRONG><a name="[8f]"></a>BQ25703_ADCVSYSVBAT_Read</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, driverbq25703.o(.text.BQ25703_ADCVSYSVBAT_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = BQ25703_ADCVSYSVBAT_Read &rArr; BQ25703_Read &rArr; I2C_API_Exchange &rArr; i2cDataRW
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BQ25703_VSYS
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BQ25703_VBAT
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BQ25703_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TransitionFunction
</UL>

<P><STRONG><a name="[93]"></a>BQ25703_ChargeCurrent_Eval</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, regbq25703a.o(.text.BQ25703_ChargeCurrent_Eval))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BQ25703_Charge_Check
</UL>

<P><STRONG><a name="[92]"></a>BQ25703_Charge_Check</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, driverbq25703.o(.text.BQ25703_Charge_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = BQ25703_Charge_Check &rArr; BQ25703_Wr_Check &rArr; I2C_API_Exchange &rArr; i2cDataRW
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BQ25703_Wr_Check
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BQ25703_ChargeCurrent_Eval
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;maintask
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TransitionFunction
</UL>

<P><STRONG><a name="[95]"></a>BQ25703_DriverReset</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, driverbq25703.o(.text.BQ25703_DriverReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BQ25703_DriverReset
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_API_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuperLoopACC_init
</UL>

<P><STRONG><a name="[8d]"></a>BQ25703_IBAT_CH</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, regbq25703a.o(.text.BQ25703_IBAT_CH))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BQ25703_ADCIBAT_Read
</UL>

<P><STRONG><a name="[8e]"></a>BQ25703_IBAT_DCH</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, regbq25703a.o(.text.BQ25703_IBAT_DCH))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BQ25703_ADCIBAT_Read
</UL>

<P><STRONG><a name="[97]"></a>BQ25703_IIN_Check</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, driverbq25703.o(.text.BQ25703_IIN_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = BQ25703_IIN_Check &rArr; BQ25703_Wr_Check &rArr; I2C_API_Exchange &rArr; i2cDataRW
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BQ25703_Wr_Check
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BQ25703_IIN_HOST_Eval
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;maintask
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TransitionFunction
</UL>

<P><STRONG><a name="[98]"></a>BQ25703_IIN_HOST_Eval</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, regbq25703a.o(.text.BQ25703_IIN_HOST_Eval))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BQ25703_IIN_HOST_Eval
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BQ25703_IIN_Check
</UL>

<P><STRONG><a name="[9a]"></a>BQ25703_Init_Check</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, driverbq25703.o(.text.BQ25703_Init_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = BQ25703_Init_Check &rArr; BQ25703_Wr_Check &rArr; I2C_API_Exchange &rArr; i2cDataRW
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BQ25703_Wr_Check
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;maintask
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TransitionFunction
</UL>

<P><STRONG><a name="[8c]"></a>BQ25703_Read</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, driverbq25703.o(.text.BQ25703_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = BQ25703_Read &rArr; I2C_API_Exchange &rArr; i2cDataRW
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_API_Exchange
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BQ25703_ADCVSYSVBAT_Read
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BQ25703_ADCIBAT_Read
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;maintask
</UL>

<P><STRONG><a name="[9c]"></a>BQ25703_SetBits_Check</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, driverbq25703.o(.text.BQ25703_SetBits_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = BQ25703_SetBits_Check &rArr; BQ25703_Wr_Check &rArr; I2C_API_Exchange &rArr; i2cDataRW
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BQ25703_Wr_Check
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;maintask
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TransitionFunction
</UL>

<P><STRONG><a name="[91]"></a>BQ25703_VBAT</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, regbq25703a.o(.text.BQ25703_VBAT))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BQ25703_ADCVSYSVBAT_Read
</UL>

<P><STRONG><a name="[90]"></a>BQ25703_VSYS</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, regbq25703a.o(.text.BQ25703_VSYS))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BQ25703_ADCVSYSVBAT_Read
</UL>

<P><STRONG><a name="[94]"></a>BQ25703_Wr_Check</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, driverbq25703.o(.text.BQ25703_Wr_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = BQ25703_Wr_Check &rArr; I2C_API_Exchange &rArr; i2cDataRW
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_API_Exchange
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BQ25703_SetBits_Check
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BQ25703_Init_Check
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BQ25703_IIN_Check
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BQ25703_Charge_Check
</UL>

<P><STRONG><a name="[9d]"></a>BQ28z610_Read</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, driverbq28z610.o(.text.BQ28z610_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = BQ28z610_Read &rArr; I2C_API_Exchange &rArr; i2cDataRW
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_API_Exchange
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TransitionFunction
</UL>

<P><STRONG><a name="[9e]"></a>BSInit</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, boardsetup.o(.text.BSInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = BSInit &rArr; boardIoPinInit &rArr; switchDisplayInterfacePinsToPwr
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSystemClock
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boardIoPinInit
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c]"></a>EXTI4_15_IRQHandler</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, board_powermodes.o(.text.EXTI4_15_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[a3]"></a>FSM_MainTransition_P</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, board_powermodes.o(.text.FSM_MainTransition_P))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FSM_MainTransition_P &rArr; TransitionFunction_P &rArr; switchDisplayInterfacePinsToPwr
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TransitionFunction_P
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainTransition_P_Displ
</UL>

<P><STRONG><a name="[133]"></a>FindRange</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, battery.o(.text.FindRange))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FindRange
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fChargeCurrent
</UL>

<P><STRONG><a name="[ca]"></a>GFXPreinit</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, superloopdisplay.o(.text.GFXPreinit))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SLD_DisplInit
</UL>

<P><STRONG><a name="[1a]"></a>I2C1_IRQHandler</STRONG> (Thumb, 292 bytes, Stack size 20 bytes, i2c1.o(.text.I2C1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = I2C1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>I2C2_IRQHandler</STRONG> (Thumb, 300 bytes, Stack size 20 bytes, i2c2.o(.text.I2C2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = I2C2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[9b]"></a>I2C_API_Exchange</STRONG> (Thumb, 276 bytes, Stack size 32 bytes, i2c_api.o(.text.I2C_API_Exchange))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = I2C_API_Exchange &rArr; i2cDataRW
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cDataRW
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getI2cStatus
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getI2cReset
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getI2cError
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPS65982_6_RW
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BQ25703_Wr_Check
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BQ25703_Read
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BQ28z610_Read
</UL>

<P><STRONG><a name="[ed]"></a>I2C_API_INIT</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, i2c_api.o(.text.I2C_API_INIT))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuperLoopACC_init
</UL>

<P><STRONG><a name="[96]"></a>I2C_API_Reset</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, i2c_api.o(.text.I2C_API_Reset))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BQ25703_DriverReset
</UL>

<P><STRONG><a name="[b7]"></a>MainTransition</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, mainfsm.o(.text.MainTransition))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = MainTransition &rArr; TransitionFunction &rArr; TPS65982_6_RDO_R &rArr; TPS65982_6_RW &rArr; I2C_API_Exchange &rArr; i2cDataRW
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TransitionFunction
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainFSMfunction
</UL>

<P><STRONG><a name="[b9]"></a>MainTransition_P_Displ</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, board_powermodes.o(.text.MainTransition_P_Displ))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MainTransition_P_Displ &rArr; FSM_MainTransition_P &rArr; TransitionFunction_P &rArr; switchDisplayInterfacePinsToPwr
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SLPl_FSMState
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSM_MainTransition_P
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SLD
</UL>

<P><STRONG><a name="[bd]"></a>ReadTPSState</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, mainfsm.o(.text.ReadTPSState))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ReadTPSState &rArr; TPS65982_6_RDO_R &rArr; TPS65982_6_RW &rArr; I2C_API_Exchange &rArr; i2cDataRW
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPS65982_6_RDO_R
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;maintask
</UL>

<P><STRONG><a name="[c0]"></a>SLC</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, superloop_comm.o(.text.SLC))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = SLC &rArr; procCmdFromUsb &rArr; wrPlayFiles &rArr; findEmptySector &rArr; W25qxx_IsEmptySector &rArr; W25qxx_Spi &rArr; spi1TransmitReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;procCmdFromUsb
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c2]"></a>SLC_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, superloop_comm.o(.text.SLC_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SLC_init &rArr; W25qxx_Init &rArr; W25qxx_ReadID
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25qxx_Init
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1Init
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c5]"></a>SLD</STRONG> (Thumb, 240 bytes, Stack size 24 bytes, superloopdisplay.o(.text.SLD))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = SLD &rArr; SLD_DisplInit &rArr; gfxInit &rArr; _gosInit &rArr; _gosThreadsInit &rArr; _gfxGetStackStateInFn &rArr; _gfxGetStackState &rArr; setjmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayms
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SLDw
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SLD_DisplInit
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainTransition_P_Displ
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinRedrawDisplay
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxDeinit
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c6]"></a>SLD_DisplInit</STRONG> (Thumb, 468 bytes, Stack size 56 bytes, superloopdisplay.o(.text.SLD_DisplInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = SLD_DisplInit &rArr; gfxInit &rArr; _gosInit &rArr; _gosThreadsInit &rArr; _gfxGetStackStateInFn &rArr; _gfxGetStackState &rArr; setjmp
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GFXPreinit
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinSetDefaultStyle
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinSetDefaultFont
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinGListCreate
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinGButtonCreate
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinAttachListener
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxInit
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geventListenerInit
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispOpenFont
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGControl
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGClear
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SLD
</UL>

<P><STRONG><a name="[f6]"></a>SLD_FSMState</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, superloopdisplay.o(.text.SLD_FSMState))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuperLoop_PowerModes
</UL>

<P><STRONG><a name="[150]"></a>SLD_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, superloopdisplay.o(.text.SLD_init))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c8]"></a>SLDw</STRONG> (Thumb, 652 bytes, Stack size 40 bytes, superloopdisplay.o(.text.SLDw))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SLDw &rArr; gwinSetText &rArr; _gwinUpdate &rArr; gtimerJab &rArr; gfxMutexEnter &rArr; gfxYield &rArr; _gfxXSwitch &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeToString
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinSetText
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinListGetSelectedText
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinListGetSelected
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinListAddItem
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geventEventWait
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SLD
</UL>

<P><STRONG><a name="[da]"></a>SLP</STRONG> (Thumb, 332 bytes, Stack size 24 bytes, superloop_player.o(.text.SLP))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = SLP &rArr; getPlayFileSector &rArr; W25qxx_IsEmptySector &rArr; W25qxx_Spi &rArr; spi1TransmitReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1FifoClr
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startFpga
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi2FifoClr
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadMultToFpga
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadFreqToFpga
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPlayFileSector
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getControlParam
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fpgaConfig
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SystemReset
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25qxx_ReadSector
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25qxx_IsEmptySector
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e7]"></a>SLP_init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, superloop_player.o(.text.SLP_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SLP_init &rArr; initSpi_2
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSpi_2
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ba]"></a>SLPl_FSMState</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, superloop_player.o(.text.SLPl_FSMState))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuperLoop_PowerModes
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainTransition_P_Displ
</UL>

<P><STRONG><a name="[e9]"></a>SuperLoopACC</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, superloop_acc.o(.text.SuperLoopACC))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = SuperLoopACC &rArr; maintask &rArr; mainFSMfunction &rArr; MainTransition &rArr; TransitionFunction &rArr; TPS65982_6_RDO_R &rArr; TPS65982_6_RW &rArr; I2C_API_Exchange &rArr; i2cDataRW
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;maintask
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[eb]"></a>SuperLoopACC_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, superloop_acc.o(.text.SuperLoopACC_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SuperLoopACC_init &rArr; BQ25703_DriverReset
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BQ25703_DriverReset
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initI2c1
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_API_INIT
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ee]"></a>SuperLoop_Acc_SleepIn</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, superloop_acc.o(.text.SuperLoop_Acc_SleepIn))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SuperLoop_Acc_SleepIn &rArr; TPS65982_6_RW &rArr; I2C_API_Exchange &rArr; i2cDataRW
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPS65982_6_RW
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuperLoop_PowerModes
</UL>

<P><STRONG><a name="[f3]"></a>SuperLoop_Acc_SleepOut</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, superloop_acc.o(.text.SuperLoop_Acc_SleepOut))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuperLoop_PowerModes
</UL>

<P><STRONG><a name="[f2]"></a>SuperLoop_Disp_SleepIn</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, superloopdisplay.o(.text.SuperLoop_Disp_SleepIn))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuperLoop_PowerModes
</UL>

<P><STRONG><a name="[f4]"></a>SuperLoop_Disp_SleepOut</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, superloopdisplay.o(.text.SuperLoop_Disp_SleepOut))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuperLoop_PowerModes
</UL>

<P><STRONG><a name="[f1]"></a>SuperLoop_Player_SleepIn</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, superloop_player.o(.text.SuperLoop_Player_SleepIn))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuperLoop_PowerModes
</UL>

<P><STRONG><a name="[f5]"></a>SuperLoop_Player_SleepOut</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, superloop_player.o(.text.SuperLoop_Player_SleepOut))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuperLoop_PowerModes
</UL>

<P><STRONG><a name="[f0]"></a>SuperLoop_PowerModes</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, board_powermodes.o(.text.SuperLoop_PowerModes))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SuperLoop_PowerModes &rArr; SuperLoop_Acc_SleepIn &rArr; TPS65982_6_RW &rArr; I2C_API_Exchange &rArr; i2cDataRW
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuperLoop_Disp_SleepOut
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuperLoop_Disp_SleepIn
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SLD_FSMState
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuperLoop_Player_SleepOut
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuperLoop_Player_SleepIn
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SLPl_FSMState
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuperLoop_Acc_SleepOut
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuperLoop_Acc_SleepIn
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, boardsetup.o(.text.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>SystemInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, system_stm32g0xx.o(.text.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(.text)
</UL>
<P><STRONG><a name="[13]"></a>TIM3_IRQHandler</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, superloop_player.o(.text.TIM3_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[be]"></a>TPS65982_6_RDO_R</STRONG> (Thumb, 352 bytes, Stack size 32 bytes, drivertps65982_6.o(.text.TPS65982_6_RDO_R))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = TPS65982_6_RDO_R &rArr; TPS65982_6_RW &rArr; I2C_API_Exchange &rArr; i2cDataRW
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPS65982_6_RW
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;maintask
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TransitionFunction
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadTPSState
</UL>

<P><STRONG><a name="[ef]"></a>TPS65982_6_RW</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, drivertps65982_6.o(.text.TPS65982_6_RW))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = TPS65982_6_RW &rArr; I2C_API_Exchange &rArr; i2cDataRW
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_API_Exchange
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPS65982_6_RDO_R
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuperLoop_Acc_SleepIn
</UL>

<P><STRONG><a name="[b8]"></a>TransitionFunction</STRONG> (Thumb, 556 bytes, Stack size 16 bytes, mainfsm.o(.text.TransitionFunction))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = TransitionFunction &rArr; TPS65982_6_RDO_R &rArr; TPS65982_6_RW &rArr; I2C_API_Exchange &rArr; i2cDataRW
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPS65982_6_RDO_R
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BQ25703_SetBits_Check
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BQ25703_Init_Check
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BQ25703_IIN_Check
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BQ25703_Charge_Check
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BQ25703_ADCVSYSVBAT_Read
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BQ25703_ADCIBAT_Read
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BQ28z610_Read
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fChargeCurrent
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainTransition
</UL>

<P><STRONG><a name="[a4]"></a>TransitionFunction_P</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, board_powermodes.o(.text.TransitionFunction_P))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TransitionFunction_P &rArr; switchDisplayInterfacePinsToPwr
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchSPI1InterfacePinsToPwr
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchOUTStageInterfacePinsToPwr
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchDisplayInterfacePinsToPwr
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSM_MainTransition_P
</UL>

<P><STRONG><a name="[1e]"></a>USART1_IRQHandler</STRONG> (Thumb, 292 bytes, Stack size 16 bytes, superloop_comm.o(.text.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[fb]"></a>W25qxx_EraseChip</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, w25qxx.o(.text.W25qxx_EraseChip))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = W25qxx_EraseChip &rArr; W25qxx_WaitForWriteEnd &rArr; W25qxx_Spi &rArr; spi1TransmitReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25qxx_WriteEnable
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25qxx_WaitForWriteEnd
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25qxx_Spi
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eraseFlash
</UL>

<P><STRONG><a name="[fe]"></a>W25qxx_EraseSector</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, w25qxx.o(.text.W25qxx_EraseSector))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = W25qxx_EraseSector &rArr; W25qxx_WaitForWriteEnd &rArr; W25qxx_Spi &rArr; spi1TransmitReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25qxx_WriteEnable
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25qxx_WaitForWriteEnd
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25qxx_Spi
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erFlash
</UL>

<P><STRONG><a name="[c4]"></a>W25qxx_Init</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, w25qxx.o(.text.W25qxx_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = W25qxx_Init &rArr; W25qxx_ReadID
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25qxx_ReadID
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SLC_init
</UL>

<P><STRONG><a name="[e4]"></a>W25qxx_IsEmptySector</STRONG> (Thumb, 272 bytes, Stack size 312 bytes, w25qxx.o(.text.W25qxx_IsEmptySector))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = W25qxx_IsEmptySector &rArr; W25qxx_Spi &rArr; spi1TransmitReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1Receive
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25qxx_Spi
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SLP
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPlayFileSector
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rdPlayFiles
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;playSectorsStatus
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findEmptySector
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;confSectorsStatus
</UL>

<P><STRONG><a name="[102]"></a>W25qxx_ReadByte</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, w25qxx.o(.text.W25qxx_ReadByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = W25qxx_ReadByte &rArr; W25qxx_Spi &rArr; spi1TransmitReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25qxx_Spi
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadFreqToFpga
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getControlParam
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fpgaConfig
</UL>

<P><STRONG><a name="[ff]"></a>W25qxx_ReadID</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, w25qxx.o(.text.W25qxx_ReadID))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = W25qxx_ReadID
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25qxx_Init
</UL>

<P><STRONG><a name="[103]"></a>W25qxx_ReadPage</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, w25qxx.o(.text.W25qxx_ReadPage))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = W25qxx_ReadPage &rArr; W25qxx_Spi &rArr; spi1TransmitReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1Receive
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25qxx_Spi
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25qxx_ReadSector
</UL>

<P><STRONG><a name="[e5]"></a>W25qxx_ReadSector</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, w25qxx.o(.text.W25qxx_ReadSector))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = W25qxx_ReadSector &rArr; W25qxx_ReadPage &rArr; W25qxx_Spi &rArr; spi1TransmitReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25qxx_ReadPage
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SLP
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rdFlash
</UL>

<P><STRONG><a name="[104]"></a>W25qxx_SectorToPage</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, w25qxx.o(.text.W25qxx_SectorToPage))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = W25qxx_SectorToPage
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrPlayFiles
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrConfFile
</UL>

<P><STRONG><a name="[28]"></a>W25qxx_Spi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, w25qxx.o(.text.W25qxx_Spi))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = W25qxx_Spi &rArr; spi1TransmitReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1TransmitReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25qxx_WriteEnable
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25qxx_WaitForWriteEnd
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25qxx_ReadPage
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25qxx_WritePage
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25qxx_ReadByte
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25qxx_IsEmptySector
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25qxx_EraseSector
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25qxx_EraseChip
</UL>
<BR>[Address Reference Count : 2]<UL><LI> w25qxx.o(.text.W25qxx_WritePage)
<LI> w25qxx.o(.text.W25qxx_ReadPage)
</UL>
<P><STRONG><a name="[fd]"></a>W25qxx_WaitForWriteEnd</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, w25qxx.o(.text.W25qxx_WaitForWriteEnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = W25qxx_WaitForWriteEnd &rArr; W25qxx_Spi &rArr; spi1TransmitReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25qxx_Spi
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25qxx_WritePage
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25qxx_EraseSector
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25qxx_EraseChip
</UL>

<P><STRONG><a name="[fc]"></a>W25qxx_WriteEnable</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, w25qxx.o(.text.W25qxx_WriteEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = W25qxx_WriteEnable &rArr; W25qxx_Spi &rArr; spi1TransmitReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25qxx_Spi
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25qxx_WritePage
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25qxx_EraseSector
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25qxx_EraseChip
</UL>

<P><STRONG><a name="[106]"></a>W25qxx_WritePage</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, w25qxx.o(.text.W25qxx_WritePage))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = W25qxx_WritePage &rArr; W25qxx_WaitForWriteEnd &rArr; W25qxx_Spi &rArr; spi1TransmitReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1Transmit
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25qxx_WriteEnable
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25qxx_WaitForWriteEnd
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25qxx_Spi
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrPage
</UL>

<P><STRONG><a name="[38]"></a>_gdispDeInitDriver</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, gfx_mk.o(.text._gdispDeInitDriver))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _gdispDeInitDriver &rArr; gdriverGetInstance
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdriverGetInstance
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gdisp_lld_ili9341.o(.rodata.GDISPVMT_OnlyOne)
</UL>
<P><STRONG><a name="[10c]"></a>_gdispInit</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, gfx_mk.o(.text._gdispInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _gdispInit &rArr; gdispGClear &rArr; gfxMutexEnter &rArr; gfxYield &rArr; _gfxXSwitch &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxSleepMilliseconds
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdriverRegister
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdriverGetNext
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGClear
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxInit
</UL>

<P><STRONG><a name="[36]"></a>_gdispInitDriver</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, gfx_mk.o(.text._gdispInitDriver))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _gdispInitDriver &rArr; gdisp_lld_init &rArr; switchDisplayInterfacePinsToPwr
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxMutexEnter
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdisp_lld_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gdisp_lld_ili9341.o(.rodata.GDISPVMT_OnlyOne)
</UL>
<P><STRONG><a name="[37]"></a>_gdispPostInitDriver</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, gfx_mk.o(.text._gdispPostInitDriver))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = _gdispPostInitDriver &rArr; gdispGSetClip &rArr; gfxMutexEnter &rArr; gfxYield &rArr; _gfxXSwitch &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGSetClip
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGFillArea
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGClear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gdisp_lld_ili9341.o(.rodata.GDISPVMT_OnlyOne)
</UL>
<P><STRONG><a name="[10f]"></a>_gdriverDeinit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gfx_mk.o(.text._gdriverDeinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _gdriverDeinit &rArr; gdriverUnRegister &rArr; gfxFree
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdriverUnRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxDeinit
</UL>

<P><STRONG><a name="[111]"></a>_gfxGetStackState</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, gfx_mk.o(.text._gfxGetStackState))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _gfxGetStackState &rArr; setjmp
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setjmp
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gosThreadsInit
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gfxGetStackStateInFn
</UL>

<P><STRONG><a name="[112]"></a>_gfxGetStackStateInFn</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, gfx_mk.o(.text._gfxGetStackStateInFn))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _gfxGetStackStateInFn &rArr; _gfxGetStackState &rArr; setjmp
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gfxGetStackState
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gosThreadsInit
</UL>

<P><STRONG><a name="[40]"></a>_gmouseDeInitDriver</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gfx_mk.o(.text._gmouseDeInitDriver))
<BR>[Address Reference Count : 1]<UL><LI> gmouse_lld_ft6x06.o(.rodata.GMOUSEVMT_OnlyOne)
</UL>
<P><STRONG><a name="[115]"></a>_gmouseDeinit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gfx_mk.o(.text._gmouseDeinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _gmouseDeinit &rArr; gtimerStop &rArr; gfxMutexEnter &rArr; gfxYield &rArr; _gfxXSwitch &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gtimerStop
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxDeinit
</UL>

<P><STRONG><a name="[117]"></a>_gmouseInit</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, gfx_mk.o(.text._gmouseInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _gmouseInit &rArr; gdriverRegister &rArr; gfxFree
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdriverRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxInit
</UL>

<P><STRONG><a name="[3e]"></a>_gmouseInitDriver</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, gfx_mk.o(.text._gmouseInitDriver))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _gmouseInitDriver &rArr; gtimerStart &rArr; gfxMutexEnter &rArr; gfxYield &rArr; _gfxXSwitch &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gtimerStart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gmouse_lld_ft6x06.o(.rodata.GMOUSEVMT_OnlyOne)
</UL>
<P><STRONG><a name="[3f]"></a>_gmousePostInitDriver</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gfx_mk.o(.text._gmousePostInitDriver))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _gmousePostInitDriver &rArr; GetMouseReading &rArr; SendMouseEvent &rArr; geventSendEvent &rArr; gfxMutexEnter &rArr; gfxYield &rArr; _gfxXSwitch &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMouseReading
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gmouse_lld_ft6x06.o(.rodata.GMOUSEVMT_OnlyOne)
</UL>
<P><STRONG><a name="[119]"></a>_gosHeapInit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gfx_mk.o(.text._gosHeapInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _gosHeapInit &rArr; gfxFree
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxFree
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gosInit
</UL>

<P><STRONG><a name="[11a]"></a>_gosInit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, gfx_mk.o(.text._gosInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = _gosInit &rArr; _gosThreadsInit &rArr; _gfxGetStackStateInFn &rArr; _gfxGetStackState &rArr; setjmp
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gosThreadsInit
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gosHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxInit
</UL>

<P><STRONG><a name="[11b]"></a>_gosThreadsInit</STRONG> (Thumb, 204 bytes, Stack size 384 bytes, gfx_mk.o(.text._gosThreadsInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = _gosThreadsInit &rArr; _gfxGetStackStateInFn &rArr; _gfxGetStackState &rArr; setjmp
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gfxGetStackStateInFn
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gfxGetStackState
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gosInit
</UL>

<P><STRONG><a name="[11c]"></a>_gtimerInit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, gfx_mk.o(.text._gtimerInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _gtimerInit
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxMillisecondsToTicks
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxInit
</UL>

<P><STRONG><a name="[24]"></a>_gwidgetCreate</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, gfx_mk.o(.text._gwidgetCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _gwidgetCreate &rArr; _gwindowCreate &rArr; gfxFree
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwindowCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinGListCreate
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinGLabelCreate
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinGButtonCreate
</UL>
<BR>[Address Reference Count : 3]<UL><LI> gfx_mk.o(.text._gwinSendEvent)
<LI> gfx_mk.o(.text.gwinAttachListener)
<LI> gfx_mk.o(.text.ListMouseSelect)
</UL>
<P><STRONG><a name="[4c]"></a>_gwidgetDestroy</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, gfx_mk.o(.text._gwidgetDestroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _gwidgetDestroy &rArr; geventDetachSourceListeners &rArr; gfxMutexEnter &rArr; gfxYield &rArr; _gfxXSwitch &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxFree
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geventDetachSourceListeners
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListDestroy
</UL>
<BR>[Address Reference Count : 2]<UL><LI> gfx_mk.o(.rodata.buttonVMT)
<LI> gfx_mk.o(.rodata.labelVMT)
</UL>
<P><STRONG><a name="[11f]"></a>_gwidgetInit</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, gfx_mk.o(.text._gwidgetInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _gwidgetInit &rArr; geventRegisterCallback &rArr; gfxMutexEnter &rArr; gfxYield &rArr; _gfxXSwitch &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geventRegisterCallback
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geventAttachSource
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinInit
</UL>

<P><STRONG><a name="[4d]"></a>_gwidgetRedraw</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gfx_mk.o(.text._gwidgetRedraw))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _gwidgetRedraw
</UL>
<BR>[Address Reference Count : 3]<UL><LI> gfx_mk.o(.rodata.buttonVMT)
<LI> gfx_mk.o(.rodata.labelVMT)
<LI> gfx_mk.o(.rodata.listVMT)
</UL>
<P><STRONG><a name="[122]"></a>_gwinDestroy</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, gfx_mk.o(.text._gwinDestroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = _gwinDestroy &rArr; _gwinFlushRedraws &rArr; gdispGSetClip &rArr; gfxMutexEnter &rArr; gfxYield &rArr; _gfxXSwitch &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinSetVisible
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxFree
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinFlushRedraws
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinDestroy
</UL>

<P><STRONG><a name="[bf]"></a>_gwinFlushRedraws</STRONG> (Thumb, 348 bytes, Stack size 40 bytes, gfx_mk.o(.text._gwinFlushRedraws))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = _gwinFlushRedraws &rArr; gdispGSetClip &rArr; gfxMutexEnter &rArr; gfxYield &rArr; _gfxXSwitch &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gtimerJab
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxSemWait
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGSetClip
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinRedraw
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinDestroy
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Size
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Move
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RedrawTimerFn
</UL>

<P><STRONG><a name="[124]"></a>_gwinInit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, gfx_mk.o(.text._gwinInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = _gwinInit &rArr; _gwmInit &rArr; gtimerStart &rArr; gfxMutexEnter &rArr; gfxYield &rArr; _gfxXSwitch &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwmInit
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwidgetInit
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxInit
</UL>

<P><STRONG><a name="[a2]"></a>_gwinSendEvent</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, gfx_mk.o(.text._gwinSendEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _gwinSendEvent &rArr; geventSendEvent &rArr; gfxMutexEnter &rArr; gfxYield &rArr; _gfxXSwitch &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geventSendEvent
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geventGetSourceListener
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geventGetEventBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonMouseUp
</UL>

<P><STRONG><a name="[a1]"></a>_gwinUpdate</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, gfx_mk.o(.text._gwinUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _gwinUpdate &rArr; gtimerJab &rArr; gfxMutexEnter &rArr; gfxYield &rArr; _gfxXSwitch &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gtimerJab
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinSetText
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinSetStyle
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinRedrawDisplay
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinListAddItem
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Size
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Raise
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListMouseSelect
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListMouseMove
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListMouseDown
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonMouseUp
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonMouseDown
</UL>

<P><STRONG><a name="[11d]"></a>_gwindowCreate</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, gfx_mk.o(.text._gwindowCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _gwindowCreate &rArr; gfxFree
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxFree
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxAlloc
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwidgetCreate
</UL>

<P><STRONG><a name="[127]"></a>_gwmDeinit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, gfx_mk.o(.text._gwmDeinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = _gwmDeinit &rArr; gwinDestroy &rArr; _gwinDestroy &rArr; _gwinFlushRedraws &rArr; gdispGSetClip &rArr; gfxMutexEnter &rArr; gfxYield &rArr; _gfxXSwitch &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinDestroy
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gtimerStop
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxDeinit
</UL>

<P><STRONG><a name="[125]"></a>_gwmInit</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, gfx_mk.o(.text._gwmInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _gwmInit &rArr; gtimerStart &rArr; gfxMutexEnter &rArr; gfxYield &rArr; _gfxXSwitch &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gtimerStart
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinInit
</UL>

<P><STRONG><a name="[a0]"></a>boardIoPinInit</STRONG> (Thumb, 368 bytes, Stack size 40 bytes, boardsetup.o(.text.boardIoPinInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = boardIoPinInit &rArr; switchDisplayInterfacePinsToPwr
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchDisplayInterfacePinsToPwr
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSInit
</UL>

<P><STRONG><a name="[129]"></a>calcFreq</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, superloop_player.o(.text.calcFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = calcFreq &rArr; freqInverse
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freqInverse
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadFreqToFpga
</UL>

<P><STRONG><a name="[12b]"></a>confSectorsStatus</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, superloop_comm.o(.text.confSectorsStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = confSectorsStatus &rArr; W25qxx_IsEmptySector &rArr; W25qxx_Spi &rArr; spi1TransmitReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25qxx_IsEmptySector
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;procCmdFromUsb
</UL>

<P><STRONG><a name="[e3]"></a>delay_ms</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, superloop_player.o(.text.delay_ms))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25qxx_Init
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SLP
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startFpga
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fpgaConfig
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25qxx_WriteEnable
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25qxx_WaitForWriteEnd
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25qxx_ReadPage
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25qxx_WritePage
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25qxx_ReadByte
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25qxx_IsEmptySector
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25qxx_EraseSector
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25qxx_EraseChip
</UL>

<P><STRONG><a name="[2f]"></a>delayms</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, boardsetup.o(.text.delayms))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SLD
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gdisp_lld_ili9341.o(.text.gdisp_lld_init)
</UL>
<P><STRONG><a name="[131]"></a>erFlash</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, superloop_comm.o(.text.erFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = erFlash &rArr; W25qxx_EraseSector &rArr; W25qxx_WaitForWriteEnd &rArr; W25qxx_Spi &rArr; spi1TransmitReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1FifoClr
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25qxx_EraseSector
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;procCmdFromUsb
</UL>

<P><STRONG><a name="[132]"></a>eraseFlash</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, superloop_comm.o(.text.eraseFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = eraseFlash &rArr; W25qxx_EraseChip &rArr; W25qxx_WaitForWriteEnd &rArr; W25qxx_Spi &rArr; spi1TransmitReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25qxx_EraseChip
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;procCmdFromUsb
</UL>

<P><STRONG><a name="[f7]"></a>fChargeCurrent</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, battery.o(.text.fChargeCurrent))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fChargeCurrent &rArr; FindRange
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindRange
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TransitionFunction
</UL>

<P><STRONG><a name="[135]"></a>findEmptySector</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, superloop_comm.o(.text.findEmptySector))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = findEmptySector &rArr; W25qxx_IsEmptySector &rArr; W25qxx_Spi &rArr; spi1TransmitReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25qxx_IsEmptySector
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrPlayFiles
</UL>

<P><STRONG><a name="[dd]"></a>fpgaConfig</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, superloop_player.o(.text.fpgaConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = fpgaConfig &rArr; W25qxx_ReadByte &rArr; W25qxx_Spi &rArr; spi1TransmitReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1FifoClr
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi2Transmit
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25qxx_ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SLP
</UL>

<P><STRONG><a name="[12a]"></a>freqInverse</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, superloop_player.o(.text.freqInverse))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = freqInverse
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calcFreq
</UL>

<P><STRONG><a name="[146]"></a>gdispBlendColor</STRONG> (Thumb, 80 bytes, Stack size 20 bytes, gfx_mk.o(.text.gdispBlendColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = gdispBlendColor
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinListDefaultDraw
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinButtonDraw_Normal
</UL>

<P><STRONG><a name="[cf]"></a>gdispGClear</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, gfx_mk.o(.text.gdispGClear))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = gdispGClear &rArr; gfxMutexEnter &rArr; gfxYield &rArr; _gfxXSwitch &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxMutexEnter
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdisp_lld_write_stop
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdisp_lld_write_start
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdisp_lld_write_color
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SLD_DisplInit
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gdispPostInitDriver
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gdispInit
</UL>

<P><STRONG><a name="[d4]"></a>gdispGControl</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, gfx_mk.o(.text.gdispGControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = gdispGControl &rArr; gfxMutexEnter &rArr; gfxYield &rArr; _gfxXSwitch &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxMutexEnter
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdisp_lld_control
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SLD_DisplInit
</UL>

<P><STRONG><a name="[137]"></a>gdispGDrawBox</STRONG> (Thumb, 170 bytes, Stack size 40 bytes, gfx_mk.o(.text.gdispGDrawBox))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = gdispGDrawBox &rArr; gfxMutexEnter &rArr; gfxYield &rArr; _gfxXSwitch &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxMutexEnter
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vline_clip
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hline_clip
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinListDefaultDraw
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinLabelDrawJustified
</UL>

<P><STRONG><a name="[139]"></a>gdispGDrawLine</STRONG> (Thumb, 236 bytes, Stack size 40 bytes, gfx_mk.o(.text.gdispGDrawLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = gdispGDrawLine &rArr; gfxMutexEnter &rArr; gfxYield &rArr; _gfxXSwitch &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxMutexEnter
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vline_clip
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hline_clip
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawpixel_clip
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinListDefaultDraw
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinButtonDraw_Normal
</UL>

<P><STRONG><a name="[13a]"></a>gdispGDrawStringBox</STRONG> (Thumb, 208 bytes, Stack size 56 bytes, gfx_mk.o(.text.gdispGDrawStringBox))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = gdispGDrawStringBox &rArr; mf_render_aligned &rArr; render_left &rArr; mf_round_to_tab &rArr; mf_character_width
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_render_aligned
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxMutexEnter
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinButtonDraw_Normal
</UL>

<P><STRONG><a name="[34]"></a>gdispGFillArea</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, gfx_mk.o(.text.gdispGFillArea))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = gdispGFillArea &rArr; gfxMutexEnter &rArr; gfxYield &rArr; _gfxXSwitch &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxMutexEnter
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fillarea
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinListDefaultDraw
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gdispPostInitDriver
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Redraw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gfx_mk.o(.text.gwinListDefaultDraw)
</UL>
<P><STRONG><a name="[13c]"></a>gdispGFillStringBox</STRONG> (Thumb, 340 bytes, Stack size 64 bytes, gfx_mk.o(.text.gdispGFillStringBox))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = gdispGFillStringBox &rArr; mf_render_aligned &rArr; render_left &rArr; mf_round_to_tab &rArr; mf_character_width
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_render_aligned
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxMutexEnter
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fillarea
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinListDefaultDraw
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinLabelDrawJustified
</UL>

<P><STRONG><a name="[10e]"></a>gdispGSetClip</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, gfx_mk.o(.text.gdispGSetClip))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = gdispGSetClip &rArr; gfxMutexEnter &rArr; gfxYield &rArr; _gfxXSwitch &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxMutexEnter
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinListDefaultDraw
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinFlushRedraws
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gdispPostInitDriver
</UL>

<P><STRONG><a name="[13d]"></a>gdispGetStringWidth</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, gfx_mk.o(.text.gdispGetStringWidth))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = gdispGetStringWidth &rArr; gdispGetStringWidthCount &rArr; mf_get_string_width &rArr; mf_round_to_tab &rArr; mf_character_width
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGetStringWidthCount
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinGLabelCreate
</UL>

<P><STRONG><a name="[13e]"></a>gdispGetStringWidthCount</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gfx_mk.o(.text.gdispGetStringWidthCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = gdispGetStringWidthCount &rArr; mf_get_string_width &rArr; mf_round_to_tab &rArr; mf_character_width
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_get_string_width
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGetStringWidth
</UL>

<P><STRONG><a name="[cc]"></a>gdispOpenFont</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, gfx_mk.o(.text.gdispOpenFont))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gdispOpenFont
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchfont
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SLD_DisplInit
</UL>

<P><STRONG><a name="[3d]"></a>gdisp_lld_control</STRONG> (Thumb, 288 bytes, Stack size 16 bytes, gdisp_lld_ili9341.o(.text.gdisp_lld_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gdisp_lld_control &rArr; write_index
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_index
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_data
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGControl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gdisp_lld_ili9341.o(.rodata.GDISPVMT_OnlyOne)
</UL>
<P><STRONG><a name="[39]"></a>gdisp_lld_init</STRONG> (Thumb, 648 bytes, Stack size 80 bytes, gdisp_lld_ili9341.o(.text.gdisp_lld_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = gdisp_lld_init &rArr; switchDisplayInterfacePinsToPwr
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchDisplayInterfacePinsToPwr
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gdispInitDriver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gdisp_lld_ili9341.o(.rodata.GDISPVMT_OnlyOne)
</UL>
<P><STRONG><a name="[3b]"></a>gdisp_lld_write_color</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gdisp_lld_ili9341.o(.text.gdisp_lld_write_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gdisp_lld_write_color &rArr; write_data
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_data
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGClear
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vline_clip
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hline_clip
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fillarea
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawpixel_clip
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gdisp_lld_ili9341.o(.rodata.GDISPVMT_OnlyOne)
</UL>
<P><STRONG><a name="[3a]"></a>gdisp_lld_write_start</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, gdisp_lld_ili9341.o(.text.gdisp_lld_write_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gdisp_lld_write_start
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGClear
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vline_clip
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hline_clip
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fillarea
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawpixel_clip
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gdisp_lld_ili9341.o(.rodata.GDISPVMT_OnlyOne)
</UL>
<P><STRONG><a name="[3c]"></a>gdisp_lld_write_stop</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gdisp_lld_ili9341.o(.text.gdisp_lld_write_stop))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGClear
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vline_clip
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hline_clip
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fillarea
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawpixel_clip
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gdisp_lld_ili9341.o(.rodata.GDISPVMT_OnlyOne)
</UL>
<P><STRONG><a name="[10b]"></a>gdriverGetInstance</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, gfx_mk.o(.text.gdriverGetInstance))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gdriverGetInstance
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gdispDeInitDriver
</UL>

<P><STRONG><a name="[bc]"></a>gdriverGetNext</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, gfx_mk.o(.text.gdriverGetNext))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gdispInit
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MousePoll
</UL>

<P><STRONG><a name="[10d]"></a>gdriverRegister</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, gfx_mk.o(.text.gdriverRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gdriverRegister &rArr; gfxFree
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxFree
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxAlloc
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gmouseInit
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gdispInit
</UL>

<P><STRONG><a name="[110]"></a>gdriverUnRegister</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, gfx_mk.o(.text.gdriverUnRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gdriverUnRegister &rArr; gfxFree
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxFree
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gdriverDeinit
</UL>

<P><STRONG><a name="[df]"></a>getControlParam</STRONG> (Thumb, 176 bytes, Stack size 48 bytes, superloop_player.o(.text.getControlParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = getControlParam &rArr; powf &rArr; __mathlib_flt_invalid &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25qxx_ReadByte
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powf
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SLP
</UL>

<P><STRONG><a name="[161]"></a>getI2c2Status</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, i2c2.o(.text.getI2c2Status))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_xyz
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_word
</UL>

<P><STRONG><a name="[b1]"></a>getI2cError</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, i2c1.o(.text.getI2cError))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_API_Exchange
</UL>

<P><STRONG><a name="[ae]"></a>getI2cReset</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, i2c1.o(.text.getI2cReset))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_API_Exchange
</UL>

<P><STRONG><a name="[af]"></a>getI2cStatus</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, i2c1.o(.text.getI2cStatus))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_API_Exchange
</UL>

<P><STRONG><a name="[de]"></a>getPlayFileSector</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, superloop_player.o(.text.getPlayFileSector))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = getPlayFileSector &rArr; W25qxx_IsEmptySector &rArr; W25qxx_Spi &rArr; spi1TransmitReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25qxx_IsEmptySector
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SLP
</UL>

<P><STRONG><a name="[121]"></a>geventAttachSource</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, gfx_mk.o(.text.geventAttachSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = geventAttachSource &rArr; gfxMutexEnter &rArr; gfxYield &rArr; _gfxXSwitch &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxMutexEnter
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinAttachListener
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwidgetInit
</UL>

<P><STRONG><a name="[11e]"></a>geventDetachSourceListeners</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, gfx_mk.o(.text.geventDetachSourceListeners))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = geventDetachSourceListeners &rArr; gfxMutexEnter &rArr; gfxYield &rArr; _gfxXSwitch &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxMutexEnter
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deleteAssignments
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwidgetDestroy
</UL>

<P><STRONG><a name="[d5]"></a>geventEventWait</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, gfx_mk.o(.text.geventEventWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = geventEventWait &rArr; gfxSemWait &rArr; gfxYield &rArr; _gfxXSwitch &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxSemWait
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SLDw
</UL>

<P><STRONG><a name="[b5]"></a>geventGetEventBuffer</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, gfx_mk.o(.text.geventGetEventBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = geventGetEventBuffer &rArr; gfxMutexEnter &rArr; gfxYield &rArr; _gfxXSwitch &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxMutexEnter
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinSendEvent
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMouseEvent
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListMouseSelect
</UL>

<P><STRONG><a name="[ad]"></a>geventGetSourceListener</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, gfx_mk.o(.text.geventGetSourceListener))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = geventGetSourceListener &rArr; gfxMutexEnter &rArr; gfxYield &rArr; _gfxXSwitch &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxMutexEnter
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinSendEvent
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListMouseSelect
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMouseReading
</UL>

<P><STRONG><a name="[d2]"></a>geventListenerInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gfx_mk.o(.text.geventListenerInit))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SLD_DisplInit
</UL>

<P><STRONG><a name="[120]"></a>geventRegisterCallback</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, gfx_mk.o(.text.geventRegisterCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = geventRegisterCallback &rArr; gfxMutexEnter &rArr; gfxYield &rArr; _gfxXSwitch &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxMutexEnter
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doExitEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwidgetInit
</UL>

<P><STRONG><a name="[b6]"></a>geventSendEvent</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, gfx_mk.o(.text.geventSendEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = geventSendEvent &rArr; gfxMutexEnter &rArr; gfxYield &rArr; _gfxXSwitch &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxMutexEnter
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinSendEvent
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMouseEvent
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListMouseSelect
</UL>

<P><STRONG><a name="[126]"></a>gfxAlloc</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, gfx_mk.o(.text.gfxAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gfxAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinSetText
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinListAddItem
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxThreadCreate
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdriverRegister
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwindowCreate
</UL>

<P><STRONG><a name="[c9]"></a>gfxDeinit</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, gfx_mk.o(.text.gfxDeinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = gfxDeinit &rArr; _gwmDeinit &rArr; gwinDestroy &rArr; _gwinDestroy &rArr; _gwinFlushRedraws &rArr; gdispGSetClip &rArr; gfxMutexEnter &rArr; gfxYield &rArr; _gfxXSwitch &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwmDeinit
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gmouseDeinit
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gdriverDeinit
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SLD
</UL>

<P><STRONG><a name="[145]"></a>gfxExit</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, gfx_mk.o(.text.gfxExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = gfxExit
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxThreadExit
</UL>

<P><STRONG><a name="[b2]"></a>gfxFree</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, gfx_mk.o(.text.gfxFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gfxFree
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinSetText
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxYield
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdriverUnRegister
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdriverRegister
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwindowCreate
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinDestroy
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwidgetDestroy
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gosHeapInit
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListDestroy
</UL>

<P><STRONG><a name="[cb]"></a>gfxInit</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, gfx_mk.o(.text.gfxInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = gfxInit &rArr; _gosInit &rArr; _gosThreadsInit &rArr; _gfxGetStackStateInFn &rArr; _gfxGetStackState &rArr; setjmp
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinInit
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gtimerInit
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gosInit
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gmouseInit
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gdispInit
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SLD_DisplInit
</UL>

<P><STRONG><a name="[ab]"></a>gfxMillisecondsToTicks</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, boardsetup.o(.text.gfxMillisecondsToTicks))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gtimerStart
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxSleepMilliseconds
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxSemWait
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gtimerInit
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMouseReading
</UL>

<P><STRONG><a name="[a9]"></a>gfxMutexEnter</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gfx_mk.o(.text.gfxMutexEnter))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = gfxMutexEnter &rArr; gfxYield &rArr; _gfxXSwitch &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxYield
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gtimerStop
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gtimerStart
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gtimerJab
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geventSendEvent
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geventRegisterCallback
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geventGetSourceListener
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geventGetEventBuffer
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geventDetachSourceListeners
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geventAttachSource
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGSetClip
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGFillStringBox
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGFillArea
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGDrawStringBox
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGDrawLine
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGDrawBox
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGControl
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGClear
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gdispInitDriver
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTimerThreadHandler
</UL>

<P><STRONG><a name="[108]"></a>gfxQueueASyncPutI</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, gfx_mk.o(.text.gfxQueueASyncPutI))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinListAddItem
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Raise
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Add
</UL>

<P><STRONG><a name="[109]"></a>gfxQueueASyncRemoveI</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, gfx_mk.o(.text.gfxQueueASyncRemoveI))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Raise
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Delete
</UL>

<P><STRONG><a name="[a6]"></a>gfxSemWait</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, gfx_mk.o(.text.gfxSemWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = gfxSemWait &rArr; gfxYield &rArr; _gfxXSwitch &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxSystemTicks
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxMillisecondsToTicks
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxYield
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geventEventWait
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinFlushRedraws
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Raise
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Delete
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTimerThreadHandler
</UL>

<P><STRONG><a name="[30]"></a>gfxSleepMilliseconds</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, gfx_mk.o(.text.gfxSleepMilliseconds))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = gfxSleepMilliseconds &rArr; gfxYield &rArr; _gfxXSwitch &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxSystemTicks
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxMillisecondsToTicks
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxYield
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gdispInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gdisp_lld_ili9341.o(.text.gdisp_lld_init)
</UL>
<P><STRONG><a name="[a8]"></a>gfxSystemTicks</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, boardsetup.o(.text.gfxSystemTicks))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gtimerStart
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxSleepMilliseconds
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxSemWait
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMouseReading
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTimerThreadHandler
</UL>

<P><STRONG><a name="[143]"></a>gfxThreadCreate</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, gfx_mk.o(.text.gfxThreadCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = gfxThreadCreate &rArr; _gfxXSwitch &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxAlloc
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gfxXSwitch
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Qadd
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gtimerStart
</UL>

<P><STRONG><a name="[114]"></a>gfxThreadExit</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, gfx_mk.o(.text.gfxThreadExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20 + In Cycle
<LI>Call Chain = gfxThreadExit &rArr;  _gfxXSwitch (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxExit
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gfxXSwitch
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Qadd
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gfxXSwitch
</UL>

<P><STRONG><a name="[a5]"></a>gfxYield</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, gfx_mk.o(.text.gfxYield))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = gfxYield &rArr; _gfxXSwitch &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxFree
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gfxXSwitch
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Qadd
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxSleepMilliseconds
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxSemWait
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxMutexEnter
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTimerThreadHandler
</UL>

<P><STRONG><a name="[123]"></a>gtimerJab</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, gfx_mk.o(.text.gtimerJab))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = gtimerJab &rArr; gfxMutexEnter &rArr; gfxYield &rArr; _gfxXSwitch &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxMutexEnter
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinSetVisible
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinUpdate
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinFlushRedraws
</UL>

<P><STRONG><a name="[118]"></a>gtimerStart</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, gfx_mk.o(.text.gtimerStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = gtimerStart &rArr; gfxMutexEnter &rArr; gfxYield &rArr; _gfxXSwitch &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxSystemTicks
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxMillisecondsToTicks
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxThreadCreate
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxMutexEnter
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwmInit
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gmouseInitDriver
</UL>

<P><STRONG><a name="[116]"></a>gtimerStop</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, gfx_mk.o(.text.gtimerStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = gtimerStop &rArr; gfxMutexEnter &rArr; gfxYield &rArr; _gfxXSwitch &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxMutexEnter
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwmDeinit
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gmouseDeinit
</UL>

<P><STRONG><a name="[d3]"></a>gwinAttachListener</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gfx_mk.o(.text.gwinAttachListener))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = gwinAttachListener &rArr; geventAttachSource &rArr; gfxMutexEnter &rArr; gfxYield &rArr; _gfxXSwitch &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geventAttachSource
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SLD_DisplInit
</UL>

<P><STRONG><a name="[4e]"></a>gwinButtonDraw_Normal</STRONG> (Thumb, 304 bytes, Stack size 72 bytes, gfx_mk.o(.text.gwinButtonDraw_Normal))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = gwinButtonDraw_Normal &rArr; gdispGDrawStringBox &rArr; mf_render_aligned &rArr; render_left &rArr; mf_round_to_tab &rArr; mf_character_width
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGDrawStringBox
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGDrawLine
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispBlendColor
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idiv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gfx_mk.o(.rodata.buttonVMT)
</UL>
<P><STRONG><a name="[128]"></a>gwinDestroy</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, gfx_mk.o(.text.gwinDestroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = gwinDestroy &rArr; _gwinDestroy &rArr; _gwinFlushRedraws &rArr; gdispGSetClip &rArr; gfxMutexEnter &rArr; gfxYield &rArr; _gfxXSwitch &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinDestroy
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwmDeinit
</UL>

<P><STRONG><a name="[d0]"></a>gwinGButtonCreate</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, gfx_mk.o(.text.gwinGButtonCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = gwinGButtonCreate &rArr; gwinSetVisible &rArr; gtimerJab &rArr; gfxMutexEnter &rArr; gfxYield &rArr; _gfxXSwitch &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinSetVisible
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwidgetCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SLD_DisplInit
</UL>

<P><STRONG><a name="[26]"></a>gwinGLabelCreate</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, gfx_mk.o(.text.gwinGLabelCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = gwinGLabelCreate &rArr; gwinSetVisible &rArr; gtimerJab &rArr; gfxMutexEnter &rArr; gfxYield &rArr; _gfxXSwitch &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinSetVisible
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGetStringWidth
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwidgetCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> superloopdisplay.o(.text.SLD_DisplInit)
</UL>
<P><STRONG><a name="[d1]"></a>gwinGListCreate</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, gfx_mk.o(.text.gwinGListCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = gwinGListCreate &rArr; gwinSetVisible &rArr; gtimerJab &rArr; gfxMutexEnter &rArr; gfxYield &rArr; _gfxXSwitch &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinSetVisible
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwidgetCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SLD_DisplInit
</UL>

<P><STRONG><a name="[147]"></a>gwinLabelDrawJustified</STRONG> (Thumb, 156 bytes, Stack size 72 bytes, gfx_mk.o(.text.gwinLabelDrawJustified))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = gwinLabelDrawJustified &rArr; gdispGFillStringBox &rArr; mf_render_aligned &rArr; render_left &rArr; mf_round_to_tab &rArr; mf_character_width
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGFillStringBox
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGDrawBox
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinLabelDrawJustifiedLeft
</UL>

<P><STRONG><a name="[51]"></a>gwinLabelDrawJustifiedLeft</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, gfx_mk.o(.text.gwinLabelDrawJustifiedLeft))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = gwinLabelDrawJustifiedLeft &rArr; gwinLabelDrawJustified &rArr; gdispGFillStringBox &rArr; mf_render_aligned &rArr; render_left &rArr; mf_round_to_tab &rArr; mf_character_width
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinLabelDrawJustified
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gfx_mk.o(.rodata.labelVMT)
</UL>
<P><STRONG><a name="[d7]"></a>gwinListAddItem</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, gfx_mk.o(.text.gwinListAddItem))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = gwinListAddItem &rArr; _gwinUpdate &rArr; gtimerJab &rArr; gfxMutexEnter &rArr; gfxYield &rArr; _gfxXSwitch &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxQueueASyncPutI
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxAlloc
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinUpdate
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SLDw
</UL>

<P><STRONG><a name="[53]"></a>gwinListDefaultDraw</STRONG> (Thumb, 740 bytes, Stack size 88 bytes, gfx_mk.o(.text.gwinListDefaultDraw))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = gwinListDefaultDraw &rArr; gdispGFillStringBox &rArr; mf_render_aligned &rArr; render_left &rArr; mf_round_to_tab &rArr; mf_character_width
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGSetClip
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGFillStringBox
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGFillArea
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGDrawLine
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGDrawBox
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispBlendColor
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idiv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gfx_mk.o(.rodata.listVMT)
</UL>
<P><STRONG><a name="[d6]"></a>gwinListGetSelected</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, gfx_mk.o(.text.gwinListGetSelected))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gwinListGetSelected
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SLDw
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinListGetSelectedText
</UL>

<P><STRONG><a name="[d8]"></a>gwinListGetSelectedText</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, gfx_mk.o(.text.gwinListGetSelectedText))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gwinListGetSelectedText &rArr; gwinListItemGetText
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinListItemGetText
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinListGetSelected
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SLDw
</UL>

<P><STRONG><a name="[14a]"></a>gwinListItemGetText</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, gfx_mk.o(.text.gwinListItemGetText))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gwinListItemGetText
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinListGetSelectedText
</UL>

<P><STRONG><a name="[14b]"></a>gwinRedraw</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, gfx_mk.o(.text.gwinRedraw))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = gwinRedraw &rArr; _gwinFlushRedraws &rArr; gdispGSetClip &rArr; gfxMutexEnter &rArr; gfxYield &rArr; _gfxXSwitch &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinFlushRedraws
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinSetDefaultStyle
</UL>

<P><STRONG><a name="[c7]"></a>gwinRedrawDisplay</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, gfx_mk.o(.text.gwinRedrawDisplay))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = gwinRedrawDisplay &rArr; _gwinUpdate &rArr; gtimerJab &rArr; gfxMutexEnter &rArr; gfxYield &rArr; _gfxXSwitch &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SLD
</UL>

<P><STRONG><a name="[cd]"></a>gwinSetDefaultFont</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gfx_mk.o(.text.gwinSetDefaultFont))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SLD_DisplInit
</UL>

<P><STRONG><a name="[ce]"></a>gwinSetDefaultStyle</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, gfx_mk.o(.text.gwinSetDefaultStyle))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = gwinSetDefaultStyle &rArr; gwinRedraw &rArr; _gwinFlushRedraws &rArr; gdispGSetClip &rArr; gfxMutexEnter &rArr; gfxYield &rArr; _gfxXSwitch &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinSetStyle
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinRedraw
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SLD_DisplInit
</UL>

<P><STRONG><a name="[14c]"></a>gwinSetStyle</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, gfx_mk.o(.text.gwinSetStyle))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = gwinSetStyle &rArr; _gwinUpdate &rArr; gtimerJab &rArr; gfxMutexEnter &rArr; gfxYield &rArr; _gfxXSwitch &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinSetDefaultStyle
</UL>

<P><STRONG><a name="[27]"></a>gwinSetText</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, gfx_mk.o(.text.gwinSetText))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = gwinSetText &rArr; _gwinUpdate &rArr; gtimerJab &rArr; gfxMutexEnter &rArr; gfxYield &rArr; _gfxXSwitch &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxFree
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxAlloc
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinUpdate
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SLDw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> superloopdisplay.o(.text.SLDw)
</UL>
<P><STRONG><a name="[10a]"></a>gwinSetVisible</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, gfx_mk.o(.text.gwinSetVisible))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = gwinSetVisible &rArr; gtimerJab &rArr; gfxMutexEnter &rArr; gfxYield &rArr; _gfxXSwitch &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gtimerJab
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinGListCreate
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinGLabelCreate
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinGButtonCreate
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinDestroy
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Size
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Move
</UL>

<P><STRONG><a name="[25]"></a>gwinWidgetClearInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gfx_mk.o(.text.gwinWidgetClearInit))
<BR>[Address Reference Count : 1]<UL><LI> superloopdisplay.o(.text.SLD_DisplInit)
</UL>
<P><STRONG><a name="[14e]"></a>i2c2DataRW</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, i2c2.o(.text.i2c2DataRW))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = i2c2DataRW &rArr; i2c2Start
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c2Start
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_xyz
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_word
</UL>

<P><STRONG><a name="[14f]"></a>i2c2Start</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, i2c2.o(.text.i2c2Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = i2c2Start
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c2DataRW
</UL>

<P><STRONG><a name="[b0]"></a>i2cDataRW</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, i2c1.o(.text.i2cDataRW))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = i2cDataRW
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_API_Exchange
</UL>

<P><STRONG><a name="[ec]"></a>initI2c1</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, i2c1.o(.text.initI2c1))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuperLoopACC_init
</UL>

<P><STRONG><a name="[bb]"></a>initI2c2</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, i2c2.o(.text.initI2c2))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MouseInit
</UL>

<P><STRONG><a name="[152]"></a>initSpi_1</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, spi1.o(.text.initSpi_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = initSpi_1
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e8]"></a>initSpi_2</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, superloop_player.o(.text.initSpi_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = initSpi_2
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SLP_init
</UL>

<P><STRONG><a name="[e0]"></a>loadFreqToFpga</STRONG> (Thumb, 268 bytes, Stack size 56 bytes, superloop_player.o(.text.loadFreqToFpga))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = loadFreqToFpga &rArr; powf &rArr; __mathlib_flt_invalid &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi2Transmit
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calcFreq
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25qxx_ReadByte
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powf
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SLP
</UL>

<P><STRONG><a name="[e1]"></a>loadMultToFpga</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, superloop_player.o(.text.loadMultToFpga))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = loadMultToFpga
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi2Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SLP
</UL>

<P><STRONG><a name="[69]"></a>main</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = main &rArr; SLD &rArr; SLD_DisplInit &rArr; gfxInit &rArr; _gosInit &rArr; _gosThreadsInit &rArr; _gfxGetStackStateInFn &rArr; _gfxGetStackState &rArr; setjmp
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tim3Init
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSpi_1
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25qxx_Init
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuperLoop_PowerModes
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuperLoopACC_init
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuperLoopACC
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SLP_init
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SLP
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SLD_init
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SLD
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SLC_init
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SLC
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSInit
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[153]"></a>mainFSMfunction</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, mainfsm.o(.text.mainFSMfunction))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = mainFSMfunction &rArr; MainTransition &rArr; TransitionFunction &rArr; TPS65982_6_RDO_R &rArr; TPS65982_6_RW &rArr; I2C_API_Exchange &rArr; i2cDataRW
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainTransition
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;maintask
</UL>

<P><STRONG><a name="[ea]"></a>maintask</STRONG> (Thumb, 216 bytes, Stack size 8 bytes, superloop_acc.o(.text.maintask))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = maintask &rArr; mainFSMfunction &rArr; MainTransition &rArr; TransitionFunction &rArr; TPS65982_6_RDO_R &rArr; TPS65982_6_RW &rArr; I2C_API_Exchange &rArr; i2cDataRW
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPS65982_6_RDO_R
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BQ25703_SetBits_Check
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BQ25703_Read
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BQ25703_Init_Check
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BQ25703_IIN_Check
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BQ25703_Charge_Check
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainFSMfunction
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadTPSState
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuperLoopACC
</UL>

<P><STRONG><a name="[57]"></a>mf_bwfont_character_width</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, gfx_mk.o(.text.mf_bwfont_character_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = mf_bwfont_character_width &rArr; find_char_range
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_char_range
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gfx_mk.o(.rodata.mf_bwfont_fixed_10x20)
</UL>
<P><STRONG><a name="[58]"></a>mf_bwfont_render_character</STRONG> (Thumb, 364 bytes, Stack size 104 bytes, gfx_mk.o(.text.mf_bwfont_render_character))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = mf_bwfont_render_character &rArr; find_char_range
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_char_range
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gfx_mk.o(.rodata.mf_bwfont_fixed_10x20)
</UL>
<P><STRONG><a name="[156]"></a>mf_character_width</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gfx_mk.o(.text.mf_character_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mf_character_width
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_render_aligned
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_get_string_width
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_round_to_tab
</UL>

<P><STRONG><a name="[13f]"></a>mf_get_string_width</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, gfx_mk.o(.text.mf_get_string_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mf_get_string_width &rArr; mf_round_to_tab &rArr; mf_character_width
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_character_width
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_round_to_tab
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_render_aligned
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGetStringWidthCount
</UL>

<P><STRONG><a name="[13b]"></a>mf_render_aligned</STRONG> (Thumb, 328 bytes, Stack size 72 bytes, gfx_mk.o(.text.mf_render_aligned))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = mf_render_aligned &rArr; render_left &rArr; mf_round_to_tab &rArr; mf_character_width
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_get_string_width
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_character_width
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;render_left
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGFillStringBox
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGDrawStringBox
</UL>

<P><STRONG><a name="[12e]"></a>mf_render_character</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, gfx_mk.o(.text.mf_render_character))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mf_render_character
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fillcharglyph
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawcharglyph
</UL>

<P><STRONG><a name="[59]"></a>mf_rlefont_character_width</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, gfx_mk.o(.text.mf_rlefont_character_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mf_rlefont_character_width &rArr; find_glyph
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_glyph
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gfx_mk.o(.rodata.mf_rlefont_UI2)
</UL>
<P><STRONG><a name="[5a]"></a>mf_rlefont_render_character</STRONG> (Thumb, 158 bytes, Stack size 48 bytes, gfx_mk.o(.text.mf_rlefont_render_character))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = mf_rlefont_render_character &rArr; write_ref_codeword &rArr; write_pixels
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_ref_codeword
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_glyph
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gfx_mk.o(.rodata.mf_rlefont_UI2)
</UL>
<P><STRONG><a name="[5b]"></a>mf_scaled_character_width</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gfx_mk.o(.text.mf_scaled_character_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mf_scaled_character_width
</UL>
<BR>[Address Reference Count : 2]<UL><LI> gfx_mk.o(.rodata.mf_rlefont_UI2_Narrow)
<LI> gfx_mk.o(.rodata.mf_rlefont_UI2_Double)
</UL>
<P><STRONG><a name="[5c]"></a>mf_scaled_render_character</STRONG> (Thumb, 64 bytes, Stack size 48 bytes, gfx_mk.o(.text.mf_scaled_render_character))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mf_scaled_render_character
</UL>
<BR>[Address Reference Count : 2]<UL><LI> gfx_mk.o(.rodata.mf_rlefont_UI2_Narrow)
<LI> gfx_mk.o(.rodata.mf_rlefont_UI2_Double)
</UL>
<P><STRONG><a name="[15a]"></a>playSectorsStatus</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, superloop_comm.o(.text.playSectorsStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = playSectorsStatus &rArr; W25qxx_IsEmptySector &rArr; W25qxx_Spi &rArr; spi1TransmitReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25qxx_IsEmptySector
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;procCmdFromUsb
</UL>

<P><STRONG><a name="[c1]"></a>procCmdFromUsb</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, superloop_comm.o(.text.procCmdFromUsb))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = procCmdFromUsb &rArr; wrPlayFiles &rArr; findEmptySector &rArr; W25qxx_IsEmptySector &rArr; W25qxx_Spi &rArr; spi1TransmitReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SystemReset
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrPlayFiles
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrConfFile
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rdPlayFiles
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rdFlash
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;playSectorsStatus
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eraseFlash
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erFlash
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;confSectorsStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SLC
</UL>

<P><STRONG><a name="[15c]"></a>rdFlash</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, superloop_comm.o(.text.rdFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = rdFlash &rArr; W25qxx_ReadSector &rArr; W25qxx_ReadPage &rArr; W25qxx_Spi &rArr; spi1TransmitReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1FifoClr
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25qxx_ReadSector
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;procCmdFromUsb
</UL>

<P><STRONG><a name="[15e]"></a>rdPlayFiles</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, superloop_comm.o(.text.rdPlayFiles))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = rdPlayFiles &rArr; W25qxx_IsEmptySector &rArr; W25qxx_Spi &rArr; spi1TransmitReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25qxx_IsEmptySector
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;procCmdFromUsb
</UL>

<P><STRONG><a name="[9f]"></a>setSystemClock</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, boardsetup.o(.text.setSystemClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = setSystemClock
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSInit
</UL>

<P><STRONG><a name="[db]"></a>spi1FifoClr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, spi1.o(.text.spi1FifoClr))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SLP
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fpgaConfig
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrPage
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rdFlash
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erFlash
</UL>

<P><STRONG><a name="[101]"></a>spi1Receive</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, spi1.o(.text.spi1Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = spi1Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25qxx_ReadPage
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25qxx_IsEmptySector
</UL>

<P><STRONG><a name="[107]"></a>spi1Transmit</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, spi1.o(.text.spi1Transmit))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25qxx_WritePage
</UL>

<P><STRONG><a name="[105]"></a>spi1TransmitReceive</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, spi1.o(.text.spi1TransmitReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = spi1TransmitReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiByteModeEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25qxx_Spi
</UL>

<P><STRONG><a name="[dc]"></a>spi2FifoClr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, superloop_player.o(.text.spi2FifoClr))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SLP
</UL>

<P><STRONG><a name="[136]"></a>spi2Transmit</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, superloop_player.o(.text.spi2Transmit))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadMultToFpga
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadFreqToFpga
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fpgaConfig
</UL>

<P><STRONG><a name="[162]"></a>spiByteModeEnable</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, spi1.o(.text.spiByteModeEnable))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1TransmitReceive
</UL>

<P><STRONG><a name="[e2]"></a>startFpga</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, superloop_player.o(.text.startFpga))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = startFpga
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SLP
</UL>

<P><STRONG><a name="[f8]"></a>switchDisplayInterfacePinsToPwr</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, boardsetup.o(.text.switchDisplayInterfacePinsToPwr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = switchDisplayInterfacePinsToPwr
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boardIoPinInit
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TransitionFunction_P
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdisp_lld_init
</UL>

<P><STRONG><a name="[f9]"></a>switchOUTStageInterfacePinsToPwr</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, boardsetup.o(.text.switchOUTStageInterfacePinsToPwr))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TransitionFunction_P
</UL>

<P><STRONG><a name="[fa]"></a>switchSPI1InterfacePinsToPwr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, boardsetup.o(.text.switchSPI1InterfacePinsToPwr))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TransitionFunction_P
</UL>

<P><STRONG><a name="[151]"></a>tim3Init</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, superloop_player.o(.text.tim3Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tim3Init
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d9]"></a>timeToString</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, superloop_player.o(.text.timeToString))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timeToString
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SLDw
</UL>

<P><STRONG><a name="[c3]"></a>uart1Init</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, superloop_comm.o(.text.uart1Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uart1Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SLC_init
</UL>

<P><STRONG><a name="[23]"></a>voidfun8</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, i2c_common.o(.text.voidfun8))
<BR>[Address Reference Count : 2]<UL><LI> driverbq28z610.o(.text.BQ28z610_Read)
<LI> drivertps65982_6.o(.text.TPS65982_6_RW)
</UL>
<P><STRONG><a name="[15b]"></a>wrConfFile</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, superloop_comm.o(.text.wrConfFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = wrConfFile &rArr; wrPage &rArr; W25qxx_WritePage &rArr; W25qxx_WaitForWriteEnd &rArr; W25qxx_Spi &rArr; spi1TransmitReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrPage
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25qxx_SectorToPage
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;procCmdFromUsb
</UL>

<P><STRONG><a name="[163]"></a>wrPage</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, superloop_comm.o(.text.wrPage))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = wrPage &rArr; W25qxx_WritePage &rArr; W25qxx_WaitForWriteEnd &rArr; W25qxx_Spi &rArr; spi1TransmitReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1FifoClr
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25qxx_WritePage
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrPlayFiles
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrConfFile
</UL>

<P><STRONG><a name="[15d]"></a>wrPlayFiles</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, superloop_comm.o(.text.wrPlayFiles))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = wrPlayFiles &rArr; findEmptySector &rArr; W25qxx_IsEmptySector &rArr; W25qxx_Spi &rArr; spi1TransmitReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrPage
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findEmptySector
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25qxx_SectorToPage
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;procCmdFromUsb
</UL>

<P><STRONG><a name="[173]"></a>__ARM_fpclassifyf</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, fpclassifyf.o(i.__ARM_fpclassifyf))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powf
</UL>

<P><STRONG><a name="[167]"></a>__mathlib_flt_divzero</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, funder.o(i.__mathlib_flt_divzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __mathlib_flt_divzero &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powf
</UL>

<P><STRONG><a name="[169]"></a>__mathlib_flt_infnan2</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, funder.o(i.__mathlib_flt_infnan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __mathlib_flt_infnan2 &rArr; __aeabi_fadd
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powf
</UL>

<P><STRONG><a name="[16b]"></a>__mathlib_flt_invalid</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, funder.o(i.__mathlib_flt_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __mathlib_flt_invalid &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powf
</UL>

<P><STRONG><a name="[16c]"></a>__mathlib_flt_overflow</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, funder.o(i.__mathlib_flt_overflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __mathlib_flt_overflow &rArr; __ARM_scalbnf
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powf
</UL>

<P><STRONG><a name="[16e]"></a>__mathlib_flt_underflow</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, funder.o(i.__mathlib_flt_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __mathlib_flt_underflow &rArr; __ARM_scalbnf
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powf
</UL>

<P><STRONG><a name="[1ae]"></a>__mathlib_powf</STRONG> (Thumb, 0 bytes, Stack size 64 bytes, powf.o(i.powf), UNUSED)

<P><STRONG><a name="[141]"></a>powf</STRONG> (Thumb, 1538 bytes, Stack size 64 bytes, powf.o(i.powf))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = powf &rArr; __mathlib_flt_invalid &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_overflow
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan2
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_divzero
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffix_r
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadFreqToFpga
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getControlParam
</UL>

<P><STRONG><a name="[16a]"></a>__aeabi_fadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan2
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powf
</UL>

<P><STRONG><a name="[174]"></a>_fadd</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
</UL>

<P><STRONG><a name="[170]"></a>__aeabi_fmul</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powf
</UL>

<P><STRONG><a name="[1af]"></a>_fmul</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul), UNUSED)

<P><STRONG><a name="[171]"></a>__aeabi_frsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub.o(x$fpl$frsb))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_frsub
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powf
</UL>

<P><STRONG><a name="[176]"></a>_frsb</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, faddsub.o(x$fpl$frsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>

<P><STRONG><a name="[16f]"></a>__aeabi_fsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powf
</UL>

<P><STRONG><a name="[178]"></a>_fsub</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[4f]"></a>ButtonMouseDown</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gfx_mk.o(.text.ButtonMouseDown))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ButtonMouseDown &rArr; _gwinUpdate &rArr; gtimerJab &rArr; gfxMutexEnter &rArr; gfxYield &rArr; _gfxXSwitch &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gfx_mk.o(.rodata.buttonVMT)
</UL>
<P><STRONG><a name="[50]"></a>ButtonMouseUp</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, gfx_mk.o(.text.ButtonMouseUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ButtonMouseUp &rArr; _gwinSendEvent &rArr; geventSendEvent &rArr; gfxMutexEnter &rArr; gfxYield &rArr; _gfxXSwitch &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinUpdate
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinSendEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gfx_mk.o(.rodata.buttonVMT)
</UL>
<P><STRONG><a name="[33]"></a>GTimerThreadHandler</STRONG> (Thumb, 228 bytes, Stack size 16 bytes, gfx_mk.o(.text.GTimerThreadHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = GTimerThreadHandler &rArr; gfxSemWait &rArr; gfxYield &rArr; _gfxXSwitch &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxSystemTicks
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxYield
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxSemWait
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxMutexEnter
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gfx_mk.o(.text.gtimerStart)
</UL>
<P><STRONG><a name="[aa]"></a>GetMouseReading</STRONG> (Thumb, 724 bytes, Stack size 40 bytes, gfx_mk.o(.text.GetMouseReading))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = GetMouseReading &rArr; SendMouseEvent &rArr; geventSendEvent &rArr; gfxMutexEnter &rArr; gfxYield &rArr; _gfxXSwitch &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxSystemTicks
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxMillisecondsToTicks
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geventGetSourceListener
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMouseEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gmousePostInitDriver
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MousePoll
</UL>

<P><STRONG><a name="[52]"></a>ListDestroy</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, gfx_mk.o(.text.ListDestroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ListDestroy &rArr; _gwidgetDestroy &rArr; geventDetachSourceListeners &rArr; gfxMutexEnter &rArr; gfxYield &rArr; _gfxXSwitch &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxFree
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwidgetDestroy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gfx_mk.o(.rodata.listVMT)
</UL>
<P><STRONG><a name="[54]"></a>ListMouseDown</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, gfx_mk.o(.text.ListMouseDown))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = ListMouseDown &rArr; ListMouseSelect &rArr; _gwinUpdate &rArr; gtimerJab &rArr; gfxMutexEnter &rArr; gfxYield &rArr; _gfxXSwitch &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinUpdate
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListMouseSelect
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idiv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gfx_mk.o(.rodata.listVMT)
</UL>
<P><STRONG><a name="[56]"></a>ListMouseMove</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, gfx_mk.o(.text.ListMouseMove))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ListMouseMove &rArr; _gwinUpdate &rArr; gtimerJab &rArr; gfxMutexEnter &rArr; gfxYield &rArr; _gfxXSwitch &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gfx_mk.o(.rodata.listVMT)
</UL>
<P><STRONG><a name="[b4]"></a>ListMouseSelect</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, gfx_mk.o(.text.ListMouseSelect))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ListMouseSelect &rArr; _gwinUpdate &rArr; gtimerJab &rArr; gfxMutexEnter &rArr; gfxYield &rArr; _gfxXSwitch &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geventSendEvent
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geventGetSourceListener
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geventGetEventBuffer
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinUpdate
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idiv
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListMouseUp
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListMouseDown
</UL>

<P><STRONG><a name="[55]"></a>ListMouseUp</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, gfx_mk.o(.text.ListMouseUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ListMouseUp &rArr; ListMouseSelect &rArr; _gwinUpdate &rArr; gtimerJab &rArr; gfxMutexEnter &rArr; gfxYield &rArr; _gfxXSwitch &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListMouseSelect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gfx_mk.o(.rodata.listVMT)
</UL>
<P><STRONG><a name="[29]"></a>MousePoll</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, gfx_mk.o(.text.MousePoll))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = MousePoll &rArr; GetMouseReading &rArr; SendMouseEvent &rArr; geventSendEvent &rArr; gfxMutexEnter &rArr; gfxYield &rArr; _gfxXSwitch &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdriverGetNext
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMouseReading
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gfx_mk.o(.text._gmouseInitDriver)
</UL>
<P><STRONG><a name="[144]"></a>Qadd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, gfx_mk.o(.text.Qadd))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxYield
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxThreadExit
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxThreadCreate
</UL>

<P><STRONG><a name="[2b]"></a>RedrawTimerFn</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, gfx_mk.o(.text.RedrawTimerFn))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = RedrawTimerFn &rArr; _gwinFlushRedraws &rArr; gdispGSetClip &rArr; gfxMutexEnter &rArr; gfxYield &rArr; _gfxXSwitch &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinFlushRedraws
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gfx_mk.o(.text._gwmInit)
</UL>
<P><STRONG><a name="[ac]"></a>SendMouseEvent</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, gfx_mk.o(.text.SendMouseEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SendMouseEvent &rArr; geventSendEvent &rArr; gfxMutexEnter &rArr; gfxYield &rArr; _gfxXSwitch &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geventSendEvent
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geventGetEventBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMouseReading
</UL>

<P><STRONG><a name="[45]"></a>WM_Add</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, gfx_mk.o(.text.WM_Add))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = WM_Add &rArr; WM_Move &rArr; WM_Size &rArr; _gwinFlushRedraws &rArr; gdispGSetClip &rArr; gfxMutexEnter &rArr; gfxYield &rArr; _gfxXSwitch &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxQueueASyncPutI
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Size
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Move
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gfx_mk.o(.rodata.GNullWindowManagerVMT)
</UL>
<P><STRONG><a name="[44]"></a>WM_DeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gfx_mk.o(.text.WM_DeInit))
<BR>[Address Reference Count : 1]<UL><LI> gfx_mk.o(.rodata.GNullWindowManagerVMT)
</UL>
<P><STRONG><a name="[46]"></a>WM_Delete</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, gfx_mk.o(.text.WM_Delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = WM_Delete &rArr; gfxSemWait &rArr; gfxYield &rArr; _gfxXSwitch &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxSemWait
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxQueueASyncRemoveI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gfx_mk.o(.rodata.GNullWindowManagerVMT)
</UL>
<P><STRONG><a name="[43]"></a>WM_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gfx_mk.o(.text.WM_Init))
<BR>[Address Reference Count : 1]<UL><LI> gfx_mk.o(.rodata.GNullWindowManagerVMT)
</UL>
<P><STRONG><a name="[4b]"></a>WM_MinMax</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gfx_mk.o(.text.WM_MinMax))
<BR>[Address Reference Count : 1]<UL><LI> gfx_mk.o(.rodata.GNullWindowManagerVMT)
</UL>
<P><STRONG><a name="[49]"></a>WM_Move</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, gfx_mk.o(.text.WM_Move))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = WM_Move &rArr; WM_Size &rArr; _gwinFlushRedraws &rArr; gdispGSetClip &rArr; gfxMutexEnter &rArr; gfxYield &rArr; _gfxXSwitch &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinSetVisible
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinFlushRedraws
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Size
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Add
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gfx_mk.o(.rodata.GNullWindowManagerVMT)
</UL>
<P><STRONG><a name="[4a]"></a>WM_Raise</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, gfx_mk.o(.text.WM_Raise))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = WM_Raise &rArr; _gwinUpdate &rArr; gtimerJab &rArr; gfxMutexEnter &rArr; gfxYield &rArr; _gfxXSwitch &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxSemWait
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxQueueASyncRemoveI
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxQueueASyncPutI
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gfx_mk.o(.rodata.GNullWindowManagerVMT)
</UL>
<P><STRONG><a name="[47]"></a>WM_Redraw</STRONG> (Thumb, 312 bytes, Stack size 64 bytes, gfx_mk.o(.text.WM_Redraw))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = WM_Redraw &rArr; gdispGFillArea &rArr; gfxMutexEnter &rArr; gfxYield &rArr; _gfxXSwitch &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGFillArea
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gfx_mk.o(.rodata.GNullWindowManagerVMT)
</UL>
<P><STRONG><a name="[48]"></a>WM_Size</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, gfx_mk.o(.text.WM_Size))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = WM_Size &rArr; _gwinFlushRedraws &rArr; gdispGSetClip &rArr; gfxMutexEnter &rArr; gfxYield &rArr; _gfxXSwitch &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinSetVisible
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinUpdate
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinFlushRedraws
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Move
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Add
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gfx_mk.o(.rodata.GNullWindowManagerVMT)
</UL>
<P><STRONG><a name="[113]"></a>_gfxXSwitch</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, gfx_mk.o(.text._gfxXSwitch))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _gfxXSwitch &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxThreadExit
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setjmp
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxYield
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxThreadExit
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxThreadCreate
</UL>

<P><STRONG><a name="[12c]"></a>deleteAssignments</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, gfx_mk.o(.text.deleteAssignments))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = deleteAssignments
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doExitEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geventDetachSourceListeners
</UL>

<P><STRONG><a name="[12d]"></a>doExitEvent</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, gfx_mk.o(.text.doExitEvent))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geventRegisterCallback
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deleteAssignments
</UL>

<P><STRONG><a name="[2d]"></a>drawcharglyph</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, gfx_mk.o(.text.drawcharglyph))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = drawcharglyph &rArr; mf_render_character
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_render_character
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gfx_mk.o(.text.gdispGDrawStringBox)
</UL>
<P><STRONG><a name="[2c]"></a>drawcharline</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, gfx_mk.o(.text.drawcharline))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = drawcharline &rArr; hline_clip &rArr; gdisp_lld_write_start
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hline_clip
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gfx_mk.o(.text.fillcharglyph)
</UL>
<P><STRONG><a name="[130]"></a>drawpixel_clip</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, gfx_mk.o(.text.drawpixel_clip))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = drawpixel_clip &rArr; gdisp_lld_write_start
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdisp_lld_write_stop
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdisp_lld_write_start
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdisp_lld_write_color
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGDrawLine
</UL>

<P><STRONG><a name="[134]"></a>fillarea</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, gfx_mk.o(.text.fillarea))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = fillarea &rArr; gdisp_lld_write_start
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdisp_lld_write_stop
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdisp_lld_write_start
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdisp_lld_write_color
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGFillStringBox
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGFillArea
</UL>

<P><STRONG><a name="[2e]"></a>fillcharglyph</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, gfx_mk.o(.text.fillcharglyph))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = fillcharglyph &rArr; mf_render_character
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_render_character
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gfx_mk.o(.text.gdispGFillStringBox)
</UL>
<P><STRONG><a name="[154]"></a>find_char_range</STRONG> (Thumb, 54 bytes, Stack size 28 bytes, gfx_mk.o(.text.find_char_range))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = find_char_range
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_bwfont_render_character
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_bwfont_character_width
</UL>

<P><STRONG><a name="[158]"></a>find_glyph</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, gfx_mk.o(.text.find_glyph))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = find_glyph
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_rlefont_render_character
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_rlefont_character_width
</UL>

<P><STRONG><a name="[2a]"></a>gwidgetEvent</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, gfx_mk.o(.text.gwidgetEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gwidgetEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gfx_mk.o(.text._gwidgetInit)
</UL>
<P><STRONG><a name="[12f]"></a>hline_clip</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, gfx_mk.o(.text.hline_clip))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = hline_clip &rArr; gdisp_lld_write_start
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdisp_lld_write_stop
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdisp_lld_write_start
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdisp_lld_write_color
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGDrawLine
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGDrawBox
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawcharline
</UL>

<P><STRONG><a name="[140]"></a>matchfont</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, gfx_mk.o(.text.matchfont))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispOpenFont
</UL>

<P><STRONG><a name="[155]"></a>mf_round_to_tab</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, gfx_mk.o(.text.mf_round_to_tab))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mf_round_to_tab &rArr; mf_character_width
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_character_width
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_get_string_width
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;render_left
</UL>

<P><STRONG><a name="[157]"></a>render_left</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, gfx_mk.o(.text.render_left))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = render_left &rArr; mf_round_to_tab &rArr; mf_character_width
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_round_to_tab
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_render_aligned
</UL>

<P><STRONG><a name="[35]"></a>scaled_pixel_callback</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, gfx_mk.o(.text.scaled_pixel_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = scaled_pixel_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gfx_mk.o(.text.mf_scaled_render_character)
</UL>
<P><STRONG><a name="[166]"></a>skip_pixels</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, gfx_mk.o(.text.skip_pixels))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_ref_codeword
</UL>

<P><STRONG><a name="[138]"></a>vline_clip</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, gfx_mk.o(.text.vline_clip))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = vline_clip &rArr; gdisp_lld_write_start
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdisp_lld_write_stop
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdisp_lld_write_start
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdisp_lld_write_color
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGDrawLine
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGDrawBox
</UL>

<P><STRONG><a name="[165]"></a>write_pixels</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, gfx_mk.o(.text.write_pixels))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = write_pixels
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_ref_codeword
</UL>

<P><STRONG><a name="[159]"></a>write_ref_codeword</STRONG> (Thumb, 260 bytes, Stack size 24 bytes, gfx_mk.o(.text.write_ref_codeword))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = write_ref_codeword &rArr; write_pixels
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_pixels
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_pixels
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_rlefont_render_character
</UL>

<P><STRONG><a name="[164]"></a>send_data</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gdisp_lld_ili9341.o(.text.send_data))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_index
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_data
</UL>

<P><STRONG><a name="[32]"></a>write_data</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, gdisp_lld_ili9341.o(.text.write_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = write_data
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdisp_lld_write_color
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdisp_lld_control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gdisp_lld_ili9341.o(.text.gdisp_lld_write_start)
</UL>
<P><STRONG><a name="[31]"></a>write_index</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, gdisp_lld_ili9341.o(.text.write_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = write_index
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdisp_lld_control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gdisp_lld_ili9341.o(.text.gdisp_lld_write_start)
</UL>
<P><STRONG><a name="[41]"></a>MouseInit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, gmouse_lld_ft6x06.o(.text.MouseInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MouseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initI2c2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gmouse_lld_ft6x06.o(.rodata.GMOUSEVMT_OnlyOne)
</UL>
<P><STRONG><a name="[160]"></a>read_word</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, gmouse_lld_ft6x06.o(.text.read_word))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = read_word &rArr; i2c2DataRW &rArr; i2c2Start
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c2DataRW
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getI2c2Status
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_xyz
</UL>

<P><STRONG><a name="[42]"></a>read_xyz</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, gmouse_lld_ft6x06.o(.text.read_xyz))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = read_xyz &rArr; read_word &rArr; i2c2DataRW &rArr; i2c2Start
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c2DataRW
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getI2c2Status
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_word
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gmouse_lld_ft6x06.o(.rodata.GMOUSEVMT_OnlyOne)
</UL>
<P><STRONG><a name="[15f]"></a>__NVIC_SystemReset</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, superloop_comm.o(.text.__NVIC_SystemReset))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;procCmdFromUsb
</UL>

<P><STRONG><a name="[e6]"></a>__NVIC_SystemReset</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, superloop_player.o(.text.__NVIC_SystemReset))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SLP
</UL>

<P><STRONG><a name="[177]"></a>_fadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub.o(x$fpl$fadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frsb
</UL>

<P><STRONG><a name="[175]"></a>_fsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub.o(x$fpl$fsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frsb
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[7f]"></a>__alloca_longjmp</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
</UL>

<P><STRONG><a name="[7d]"></a>__alloca_setjmp</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setjmp
</UL>

<P><STRONG><a name="[89]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[84]"></a>_printf_post_padding</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[83]"></a>_printf_pre_padding</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[6f]"></a>_printf_truncate_signed</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[70]"></a>_printf_truncate_unsigned</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>
<HR></body></html>
